{
	"info": {
		"_postman_id": "a6f9aaa0-6a79-45fe-b6ab-055a3e6bc63b",
		"name": "FINCH V2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "New Onboarding - Onfido",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"min = Math.ceil(1000000);",
									"max = Math.floor(9999999);",
									"const randno=Math.floor(Math.random() * (max - min)) + min;",
									"const email=\"finchV2\"+randno+\"@gmail.com\";",
									"//const email=\"udesh.s+9212346890@aeturnum.com\";",
									"const url_email=encodeURIComponent(email);",
									"pm.environment.set(\"user_email\",email);",
									"pm.environment.set(\"random_number\",randno);",
									"pm.environment.set(\"encoded_email\",url_email);",
									"",
									"console.log(\"====Registering New User - User Datails====\")",
									"console.log(\"Email : \"+email)",
									"console.log(\"Phone Number : +9477\"+randno)",
									"",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")",
									"",
									"/*  */",
									"console.log(\"Environment Name : \"+pm.environment.name)",
									"",
									"console.log(\"Pre-request Script ----- Customer Login\")",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")",
									"",
									"/* Randomize zip code */",
									"var min = Math.ceil(10000);",
									"var max = Math.floor(99999);",
									"var randnum=Math.floor(Math.random() * (max - min)) + min;",
									"pm.environment.set(\"zipcode\",randnum);",
									"/* Randomize Device UUID */",
									"var uuid = require('uuid');",
									"var myUUID = uuid.v4(); ",
									"console.log(\"device uuid\"+myUUID);",
									"pm.environment.set(\"device_uuid\",myUUID);",
									"",
									"/* Expire Date for Synapse Test Cards  */",
									"const moment = require('moment');",
									"var month = (\"today\", moment().format(\"MM\"));",
									"var year = (\"today\", moment().format(\"YY\"));",
									"year = Number(year)+4;",
									"",
									"expireDate = month+\"/\"+year;",
									"console.log(\"Expire Date for Synapse Cards : \"+ expireDate);",
									"pm.environment.set(\"expiredate_synapse\",expireDate);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let registrationRetries = pm.globals.has(\"registrationRetries\") && pm.globals.get(\"registrationRetries\") || 0;\r",
									"if(responseCode.code===400 && registrationRetries<4){\r",
									"    postman.setNextRequest(pm.info.requestName)\r",
									"    pm.globals.set(\"registrationRetries\",++registrationRetries);\r",
									"    console.log(registrationRetries);\r",
									"}\r",
									"else{\r",
									"    console.log(\"No of Registration Failes Due to invalid Phone Number : \"+registrationRetries);\r",
									"    pm.globals.unset(\"registrationRetries\");\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.environment.set(\"device_id\",jsonData.deviceInformationResponse.id);\r",
									"}\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===201;\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{user_email}}\",\r\n  \"password\": \"Test@123\",\r\n  \"phoneNumber\": \"+9477{{random_number}}\",\r\n  \"deviceToRegister\": {\r\n    \"deviceUuid\": \"{{device_uuid}}\",\r\n    \"deviceToken\": \"wkjoieyr237r2rt623423423247239424238r\",\r\n    \"fingerprint\": \"wuh289ry2389r-23239-23rfe2387r-23r23\",\r\n    \"model\": \"XR\",\r\n    \"name\": \"iPhone XR\",\r\n    \"product\": \"Apple iPhone XR\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/public/register",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{user_email}}",
									"type": "text"
								},
								{
									"key": "current_app_version",
									"value": "0.1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "featureGate Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "body",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/configs/public/17009",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"configs",
								"public",
								"17009"
							]
						},
						"description": "You can upload live photos to this endpoint. Like document upload, files must be uploaded as a multipart form. Valid file types are jpg, png and pdf. The file size must be between 32KB and 10MB. Live photos are validated at the point of upload to check that they contain exactly one face. This validation can be disabled by setting the advanced_validation argument to false.\n"
					},
					"response": []
				},
				{
					"name": "Verify Phone OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"123456\",\r\n    \"phoneNumber\": \"+9477{{random_number}}\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/verify-phone",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"verify-phone"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Verify Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"addressPostalCode\": \"12325\",\n    \"addressStreet\": \"1 Market Street Suite 28850\",\n    \"addressSubdivision\": \"CA\",\n    \"addressCountryCode\": \"US\",\n    \"addressCity\": \"San francisco\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/public/verify-address",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"public",
								"verify-address"
							]
						}
					},
					"response": []
				},
				{
					"name": "Onboading questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"    \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/onboarding-questions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"onboarding-questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create KYC Applicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(201);\r",
									" });\r",
									"\r",
									" let jsonData = pm.response.json();\r",
									" console.log(\"Applicant ID : \"+jsonData.kycApplicantId);\r",
									"pm.environment.set(\"applicant_id\", jsonData.kycApplicantId);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\": \"User\",\r\n    \"preferredName\": \"finchauto\",\r\n    \"firstName\": \"Reg Automation\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/kyc/applicant",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"kyc",
								"applicant"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Device Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"deviceUuid\": \"{{device_uuid}}\",\r\n    \"name\": \"Reg User Iphone\",\r\n    \"model\": \"iPhone XS Max\",\r\n    \"product\": \"EC7FD262-189B-4850-9B56-BF9CFCDC9745\",\r\n    \"apnsToken\": \"fca1174f4087f3b12323aa9a079e54c0a63141c1322233f590442d7d13365b11\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/devices/:id",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"devices",
								":id"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{device_id}}"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Generate KYC Mobile SDK token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/kyc/token",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"kyc",
								"token"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Upload document front",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"     pm.response.to.have.status(201);\r",
									" });\r",
									"\r",
									" let jsonData = pm.response.json();\r",
									" console.log(\"document_front : \"+jsonData.id);\r",
									"pm.environment.set(\"document_front\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token token={{onfido_apiToken}}"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "type",
									"value": "driving_licence"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/swvik/Documents/Aeturnum/Finch Money/Testing/Postman Test Suites/BitBucket/JenkinsTroubleshhot/drivingFront.png"
								},
								{
									"key": "side",
									"value": "front",
									"description": "The possible values are front and back"
								},
								{
									"key": "applicant_id",
									"value": "{{applicant_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{onfido_baseurl}}/v3/documents",
							"host": [
								"{{onfido_baseurl}}"
							],
							"path": [
								"v3",
								"documents"
							]
						},
						"description": "Documents are uploaded using this endpoint. Along with the file upload the relevant document type must be specified. Documents must be uploaded as a multipart form. The valid file types are: jpg, png and pdf. The file size must be between 2KB and 3MB.\n"
					},
					"response": []
				},
				{
					"name": "Upload document back",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"     pm.response.to.have.status(201);\r",
									" });\r",
									"\r",
									" let jsonData = pm.response.json();\r",
									" console.log(\"document_back : \"+jsonData.id);\r",
									"pm.environment.set(\"document_back\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token token={{onfido_apiToken}}"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "type",
									"value": "driving_licence"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/swvik/Documents/Aeturnum/Finch Money/Testing/Postman Test Suites/BitBucket/JenkinsTroubleshhot/drivingBack.png"
								},
								{
									"key": "side",
									"value": "back",
									"description": "The possible values are front and back"
								},
								{
									"key": "applicant_id",
									"value": "{{applicant_id}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{onfido_baseurl}}/v3/documents",
							"host": [
								"{{onfido_baseurl}}"
							],
							"path": [
								"v3",
								"documents"
							]
						},
						"description": "Documents are uploaded using this endpoint. Along with the file upload the relevant document type must be specified. Documents must be uploaded as a multipart form. The valid file types are: jpg, png and pdf. The file size must be between 2KB and 3MB.\n"
					},
					"response": []
				},
				{
					"name": "Upload live photo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"     pm.response.to.have.status(201);\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Token token={{onfido_apiToken}}"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "applicant_id",
									"value": "{{applicant_id}}"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/swvik/Documents/Aeturnum/Finch Money/Testing/Postman Test Suites/BitBucket/JenkinsTroubleshhot/live_Wick.jpg"
								},
								{
									"key": "advanced_validation",
									"value": "false",
									"description": "Defaults to true. Validates that the live photo contains exactly one face.",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{onfido_baseurl}}/v3/live_photos",
							"host": [
								"{{onfido_baseurl}}"
							],
							"path": [
								"v3",
								"live_photos"
							]
						},
						"description": "You can upload live photos to this endpoint. Like document upload, files must be uploaded as a multipart form. Valid file types are jpg, png and pdf. The file size must be between 32KB and 10MB. Live photos are validated at the point of upload to check that they contain exactly one face. This validation can be disabled by setting the advanced_validation argument to false.\n"
					},
					"response": []
				},
				{
					"name": "Get Onfido Documents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Token token={{onfido_apiToken}}"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "applicant_id",
									"value": "{{applicant_id}}",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "advanced_validation",
									"value": "false",
									"description": "Defaults to true. Validates that the live photo contains exactly one face.",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{onfido_baseurl}}/v3/documents?applicant_id={{applicant_id}}",
							"host": [
								"{{onfido_baseurl}}"
							],
							"path": [
								"v3",
								"documents"
							],
							"query": [
								{
									"key": "applicant_id",
									"value": "{{applicant_id}}"
								}
							]
						},
						"description": "You can upload live photos to this endpoint. Like document upload, files must be uploaded as a multipart form. Valid file types are jpg, png and pdf. The file size must be between 32KB and 10MB. Live photos are validated at the point of upload to check that they contain exactly one face. This validation can be disabled by setting the advanced_validation argument to false.\n"
					},
					"response": []
				},
				{
					"name": "download documents front",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "image/png"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/kyc/document/{{document_front}}/download",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"kyc",
								"document",
								"{{document_front}}",
								"download"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "download documents back",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "image/png"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/kyc/document/{{document_back}}/download",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"kyc",
								"document",
								"{{document_back}}",
								"download"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Create KYC Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(201);\r",
									" });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/kyc/check",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"kyc",
								"check"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Get report for KYC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/kyc/report",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"kyc",
								"report"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Get document file for KYC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/kyc/documents",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"kyc",
								"documents"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Brokarage Upload File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									" let jsonData = pm.response.json();\r",
									" pm.environment.set(\"snapId\", jsonData[0].snapId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "body",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							},
							{
								"key": "Content-Type",
								"value": "image/png"
							},
							{
								"key": "Content-Disposition",
								"value": "form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "type",
									"value": "driving_licence",
									"disabled": true
								},
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/swvik/Documents/Aeturnum/Finch Money/Testing/Postman Test Suites/BitBucket/JenkinsTroubleshhot/livePhoto.png"
								},
								{
									"key": "side",
									"value": "front",
									"description": "The possible values are front and back",
									"disabled": true
								},
								{
									"key": "applicant_id",
									"value": "{{applicant_id}}",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/brokerage/upload-file?metadata=%7B%22imageName%22%3A%22-5913.png%22%2C%22tag%22%3A%22ID_DOCUMENT%22%2C%22correspondent%22%3A%22TRIO%22%7D",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"brokerage",
								"upload-file"
							],
							"query": [
								{
									"key": "metadata",
									"value": "%7B%22imageName%22%3A%22-5913.png%22%2C%22tag%22%3A%22ID_DOCUMENT%22%2C%22correspondent%22%3A%22TRIO%22%7D"
								}
							]
						},
						"description": "Documents are uploaded using this endpoint. Along with the file upload the relevant document type must be specified. Documents must be uploaded as a multipart form. The valid file types are: jpg, png and pdf. The file size must be between 2KB and 3MB.\n"
					},
					"response": []
				},
				{
					"name": "Onboarding for banking services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===201;\r",
									"pm.test(\"Verify Response doesn't have errors\",function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors).to.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"addressStreet\": \"1 MARKET ST STE 28850\",\n    \"lastName\": \"User\",\n    \"day\": 1,\n    \"addressPostalCode\": \"94105\",\n    \"addressCountryCode\": \"US\",\n    \"gender\": \"FEMALE\",\n    \"addressCity\": \"SAN FRANCISCO\",\n    \"addressSubdivision\": \"CA\",\n    \"firstName\": \"Reg Automation\",\n    \"mailingAddress\": {\n        \"addressPostalCode\": \"94105\",\n        \"addressCountryCode\": \"US\",\n        \"addressSubdivision\": \"CA\",\n        \"addressCity\": \"SAN FRANCISCO\",\n        \"addressStreet\": \"1 MARKET ST STE 28850\"\n    },\n    \"year\": 1971,\n    \"month\": 1,\n    \"kycRequest\": {\n        \"ssnNumber\": \"416732222\",\n        \"uploadedDocuments\": [\n            {\n                \"documentType\": \"GOVT_ID\",\n                \"documentValue\": \"data:image\\/png;base64,SUQs==\"\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/register-banking-services",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"register-banking-services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Onboarding for brokerage services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===201;\r",
									"\r",
									"pm.test(\"Verify Response doesn't have errors\",function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errors).to.eql(null);\r",
									"});\r",
									"setTimeout(function(){}, 30000);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"permanentResident\": \"YES\",\n    \"citizenshipCountry\": \"USA\",\n    \"disclosures\": {\n        \"isPoliticallyExposed\": \"NO\",\n        \"isControlPerson\": \"NO\",\n        \"isAffiliatedExchangeOrFINRA\": \"NO\"\n    },\n    \"investmentProfile\": {\n        \"investmentObjective\": \"CAPITAL_PRESERVATION\",\n        \"riskTolerance\": \"MEDIUM\",\n        \"federalTaxBracketPercent\": 22,\n        \"investmentExperience\": \"LIMITED\"\n    },\n    \"ssnNumber\": \"026542222\",\n    \"onboardingQuestionAnswers\": [\n        {\n            \"response\": [\n                {\n                    \"key\": \"Intermediate\",\n                    \"value\": \"Intermediate\",\n                    \"identifier\": \"B\",\n                    \"additionalDetails\": [],\n                    \"description\": \"I have some investing experience and have good understanding of the markets.\"\n                }\n            ],\n            \"questionId\": \"806d8617-9d15-442d-bb31-6f9f03549d5a\"\n        },\n        {\n            \"questionId\": \"547c6bf1-8892-42ed-b459-c5016e127ee8\",\n            \"response\": [\n                {\n                    \"key\": \"Moderately\",\n                    \"identifier\": \"2\",\n                    \"description\": \"I'm okay with taking some risk. I can accept modest losses for the possibility of modest gains.\",\n                    \"additionalDetails\": [],\n                    \"value\": \"Moderately\"\n                }\n            ]\n        },\n        {\n            \"questionId\": \"de88645d-7091-4cdb-a214-ae4dc00c7a79\",\n            \"response\": [\n                {\n                    \"identifier\": \"4\",\n                    \"description\": \"Student\",\n                    \"key\": \"STUDENT\",\n                    \"additionalDetails\": [],\n                    \"value\": \"STUDENT\"\n                }\n            ]\n        },\n        {\n            \"questionId\": \"baa418af-97bd-4025-99a0-2aca5efb323c\",\n            \"response\": [\n                {\n                    \"additionalDetails\": [],\n                    \"key\": \"2\",\n                    \"description\": \"$25k â€“ $50k\",\n                    \"identifier\": \"2\",\n                    \"value\": \"min: 25001, max: 50000\"\n                }\n            ]\n        },\n        {\n            \"questionId\": \"bfd6266d-0c77-41d0-9ccb-f5a4bcd654be\",\n            \"response\": [\n                {\n                    \"description\": \"$100k - $200k\",\n                    \"identifier\": \"3\",\n                    \"key\": \"3\",\n                    \"value\": \"min: 100001, max: 200000\",\n                    \"additionalDetails\": []\n                }\n            ]\n        }\n    ],\n    \"tradeAuthorization\": {\n        \"isTradeAuthorization\": \"NO\"\n    },\n    \"applicantSignature\": {\n        \"imageSource\": \"SNAP\",\n        \"photoIdReference\": \"{{snapId}}\",\n        \"imageReference\": \"352233a9-707a-4988-a2d6-0576f88f4473\"\n    },\n    \"suitabilityProfile\": {\n        \"liquidityNeeds\": \"VERY_IMPORTANT\",\n        \"timeHorizon\": \"SHORT\"\n    }\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/register-investment-services",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"register-investment-services"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Details dehydrate true",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    console.log(\"Banking Services Enabled for current user : \"+jsonData.userDetailsDto.bankingEnabled);\r",
									"    console.log(\"Investment Services Enabled for current user : \"+jsonData.userDetailsDto.investmentEnabled);\r",
									"\r",
									"    var bankingEnabled = jsonData.userDetailsDto.bankingEnabled;\r",
									"    var investmentEnabled = jsonData.userDetailsDto.investmentEnabled;\r",
									"\r",
									"    pm.test(\"Verify User Banking Profile is verified and enabled (Synapse)\", function () { \r",
									"    pm.expect(bankingEnabled).to.eql(true);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify User Investment Profile is verified and enabled (Apex)\", function () { \r",
									"    pm.expect(investmentEnabled).to.eql(true);\r",
									"    });\r",
									"\r",
									"        if(bankingEnabled == false || investmentEnabled == false){\r",
									"        console.log(\"|||||||>>>>>>>>>Skipping New User Flows : User is currrently being verified.\")\r",
									"        //postman.setNextRequest(\"Login Reusable Users\");      \r",
									"    }\r",
									"    \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/me/details?fullDehydrate=1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"me",
								"details"
							],
							"query": [
								{
									"key": "fullDehydrate",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"Environment Name : \"+pm.environment.name)",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Early User Flag (FD-9)",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"\r",
									"setTimeout(function(){}, 3000);   \r",
									"console.log(\"$$$$$$$$$$$$$$$$$$ New User : \"+jsonData.user_name);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Early user | Transfers out (within 3 weeks)\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{user_email}}",
									"type": "text"
								},
								{
									"key": "current_app_version",
									"value": "0.1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Update Prefered Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"preferredName\": \"VikiBiki\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/preferredname",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"preferredname"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "GET All Subscription Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"adjustable\": false,\r\n    \"custom\": false,\r\n    \"portfolioName\": \"Growth\",\r\n    \"sustainable\": true,\r\n    \"investmentChoices\": [\r\n        {\r\n            \"etfId\": \"4c69f9b3-f2af-49a1-b582-48c554445427\",\r\n            \"investedPercent\": 30\r\n        },\r\n        {\r\n            \"investedPercent\": 30,\r\n            \"etfId\": \"f81bb093-b826-4274-91bb-85ed51ef0309\"\r\n        },\r\n        {\r\n            \"etfId\": \"2989b062-2463-4349-b18f-2e93e8cb1071\",\r\n            \"investedPercent\": 40\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/subscriptions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"subscriptions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Add User Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriptionId\": \"d8dc2a70-4d3d-11ec-ba14-4cebbd32c150\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/subscriptions/user",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"subscriptions",
								"user"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "GET User Subscription Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"adjustable\": false,\r\n    \"custom\": false,\r\n    \"portfolioName\": \"Growth\",\r\n    \"sustainable\": true,\r\n    \"investmentChoices\": [\r\n        {\r\n            \"etfId\": \"4c69f9b3-f2af-49a1-b582-48c554445427\",\r\n            \"investedPercent\": 30\r\n        },\r\n        {\r\n            \"investedPercent\": 30,\r\n            \"etfId\": \"f81bb093-b826-4274-91bb-85ed51ef0309\"\r\n        },\r\n        {\r\n            \"etfId\": \"2989b062-2463-4349-b18f-2e93e8cb1071\",\r\n            \"investedPercent\": 40\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/subscriptions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"subscriptions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Update User Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriptionTypeId\": \"ea11dfc4-4d3d-11ec-ba15-4cebbd32c150\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/subscriptions/user",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"subscriptions",
								"user"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "GET All package types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"adjustable\": false,\r\n    \"custom\": false,\r\n    \"portfolioName\": \"Growth\",\r\n    \"sustainable\": true,\r\n    \"investmentChoices\": [\r\n        {\r\n            \"etfId\": \"4c69f9b3-f2af-49a1-b582-48c554445427\",\r\n            \"investedPercent\": 30\r\n        },\r\n        {\r\n            \"investedPercent\": 30,\r\n            \"etfId\": \"f81bb093-b826-4274-91bb-85ed51ef0309\"\r\n        },\r\n        {\r\n            \"etfId\": \"2989b062-2463-4349-b18f-2e93e8cb1071\",\r\n            \"investedPercent\": 40\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/packages/types?offset=100&pageNumber=1&pageSize=20&paged=true&sort.sorted=true",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"packages",
								"types"
							],
							"query": [
								{
									"key": "offset",
									"value": "100"
								},
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "20"
								},
								{
									"key": "paged",
									"value": "true"
								},
								{
									"key": "sort.sorted",
									"value": "true"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Add User Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"packageId\": \"c76a8815-db92-4a01-9c84-f71d8dc5013e\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/packages/user",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"packages",
								"user"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "GET User package Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"adjustable\": false,\r\n    \"custom\": false,\r\n    \"portfolioName\": \"Growth\",\r\n    \"sustainable\": true,\r\n    \"investmentChoices\": [\r\n        {\r\n            \"etfId\": \"4c69f9b3-f2af-49a1-b582-48c554445427\",\r\n            \"investedPercent\": 30\r\n        },\r\n        {\r\n            \"investedPercent\": 30,\r\n            \"etfId\": \"f81bb093-b826-4274-91bb-85ed51ef0309\"\r\n        },\r\n        {\r\n            \"etfId\": \"2989b062-2463-4349-b18f-2e93e8cb1071\",\r\n            \"investedPercent\": 40\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/packages/my-details",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"packages",
								"my-details"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Update User Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"packageId\": \"0b5e291f-266a-4671-a25f-6c30726c6dd6\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/packages/user",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"packages",
								"user"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Add debit card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"if(responseCode.code===400 || responseCode.code===401){\r",
									"    console.log(jsonData.message);\r",
									"    postman.setNextRequest(\"Login_Reusable_User\");\r",
									"\r",
									"}\r",
									"else{\r",
									" pm.environment.set(\"external_account_id\", jsonData[0].nodeId);\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"setTimeout(function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | Debit Card\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"expDate\": \"I\\/Am31H7Fy\\/QfxV6338RoqAZ5Kj\\/H8ACSFjGcuORXSOfR4nQ+camrkC3uHZPUKLgA7drOIfYQRQIj\\/q3XjBjjrxlndQGp0egm\\/2fdfzdsDLx62dyR0+MWNrlY5OemmTdkl5pMiAFFbZ9SOJ+g6Vhp2wTDj4zKOZYANlaj3hdtgPLD9e2ZXoi5BTMzwukCAMLIa7gSRWdgMV\\/oCqslYjjy3cENohmZY5wi+Lw1nbApE2X33K0X6BRpspf0CfTF+yMEaG\\/CBorPsCwDepkFvPUxr+IMbm9JkFaEzhu\\/YM9mhDky8MGFzWvkNXNpRniGdzedJReS7Zf2hg75vSjf+9O3w==\",\n    \"nickname\": \"XXXX 9995\",\n    \"cardNumber\": \"b\\/Fr\\/pt1VqrGyHQn5AWEXIjgcdnq+aFapVifY6thWRJ7nIyY7F7BFXu3xu3NFcA03n4V0JjGVTFwNue+hWLTTPL8pK1Tu3bhta9AE8Mnq\\/MzF2XsCbmMnuNOrBQZ0ceOtyrjZ5CnTB4TiwODsxU1h0nWVZjwl6\\/mRcS8NA+k3toOWmfTNdgbnjOESxb6b\\/ktigK5Bc6Zec+oQLRUn\\/6nF36ywbZphFJnKmsSt0lHr4\\/CVyS5G65nkEc5GkpkyTMxM\\/qMZ7EDsjgJ6tj6+1Glzz1WcDhDGy4ws9as2a9szfyv6wmnijLTEzXXIsUORKnS\\/px1FDe+YAiFUmV7Aozk\\/g==\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/node/interchange",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"node",
								"interchange"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit money using debit card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData.transactionId)\r",
									"pm.environment.set(\"transactionId\", jsonData.transactionId);\r",
									"\r",
									"setTimeout(function(){}, 30000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"amount\": 100.00,\r\n  \"currency\": \"USD\",\r\n  \"toNodeId\": \"-ta-\",\r\n  \"note\": \"Deposit to FINCH : Debit Card\",\r\n  \"toNodeType\": \"DEPOSIT-US\",\r\n  \"fromNodeId\": \"{{external_account_id}}\",\r\n  \"fromNodeType\": \"INTERCHANGE-US\",\r\n  \"label\": \"DEBIT-CARD\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get User Transaction History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 1000);\r",
									"var transactionId = pm.environment.get(\"transactionId\");\r",
									"console.log(transactionId)\r",
									"var isTransactionSettled = false;\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var transaction_count = jsonData.length;\r",
									"console.log(\"Transaction count : \"+transaction_count)\r",
									"\r",
									"/*\r",
									"Verify whether previous transaction is settled with the synapse side\r",
									"*/\r",
									"\r",
									"for(var i = 0; i < transaction_count; i++) {\r",
									"    console.log(i+\" :: \"+ jsonData[i].providerTransactionId)\r",
									"    if(jsonData[i].providerTransactionId == transactionId){\r",
									"        console.log(jsonData[i].providerTransactionId)\r",
									"        if(jsonData[i].transactionStatus == \"SETTLED\"){\r",
									"                isTransactionSettled = true;\r",
									"                console.log(\"Transaction has settled.\");\r",
									"        }\r",
									"        else{\r",
									"            console.log(\"This transactions is not yet settled. still on \"+jsonData[i].transactionStatus+\" State.\")\r",
									"            postman.setNextRequest(\"Login_Reusable_User\");\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"Verify whether Transaction settled.\", function () {\r",
									"    pm.expect(isTransactionSettled).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							],
							"query": [
								{
									"key": "transactionTypes",
									"value": "{{transcationTypes}}",
									"disabled": true
								},
								{
									"key": "transactionStatuses",
									"value": "{{transactionStatuses}}",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"if(jsonData.cardDto != null){\r",
									"pm.environment.set(\"subnet_id\", jsonData.cardDto[0]._id);\r",
									"pm.environment.set(\"node_id\", jsonData.cardDto[0].node_id);\r",
									"}\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/me/details?fullDehydrate=1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"me",
								"details"
							],
							"query": [
								{
									"key": "fullDehydrate",
									"value": "1"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Reset Pin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 30000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									"\r",
									"setTimeout(function(){}, 30000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"123456\",\r\n    \"nodeId\": \"{{node_id}}\",\r\n    \"subnetId\": \"{{subnet_id}}\",\r\n    \"pin\": \"mPB+q8pjzoHd9zpts\\/SkDnwMflZEF2iOqBk9Jw3+wr4CwmlDcDwCPCOGdhPvp5AKL7a55TDI8n+xHpYHHQVw5N\\/KG+2+8pZVnuUYugDrjpxWBHsafHylWbwhotLBhgZvPS2tfccSbZtIhPD63Mf7ywni98aHsmV+qfbjwlzVewhskd7w6ReDB2D8kN3uq9yTjyf+UATCIL0wGvG1MDoJCUbZ7lvQrGh8StWdl6iPs+dLGIjIVDABBXl6YEsKKqFWFgD1FUhqYzngUYK3qmCMk+hGFdXYxm3o5xqzOvB9XG7jFV+AbIloyPO8C3pVw+6wIjfBShDYrXsmUOZ2Jmf0jw==\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/cards/reset-pin",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"cards",
								"reset-pin"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Active Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 30000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subnetId\": \"{{subnet_id}}\",\r\n    \"nodeId\": \"{{node_id}}\",\r\n    \"status\": \"ACTIVE\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/cards/status",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"cards",
								"status"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Admin portal login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"admin_access_token\", jsonData.access_token);\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{admin-api-gateway}}/uaa/oauth/token?noAuth=true",
							"host": [
								"{{admin-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "noAuth",
									"value": "true"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Activate debit card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{admin_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"ACTIVE\""
						},
						"url": {
							"raw": "{{admin-api-gateway}}/management-service/trio/cards/status/{{user_id}}",
							"host": [
								"{{admin-api-gateway}}"
							],
							"path": [
								"management-service",
								"trio",
								"cards",
								"status",
								"{{user_id}}"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Unlock Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subnetId\": \"{{subnet_id}}\",\r\n    \"nodeId\": \"{{node_id}}\",\r\n    \"status\": \"ACTIVE\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/cards/status",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"cards",
								"status"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"subnet_id\", jsonData.cardDto._id);\r",
									"pm.environment.set(\"node_id\", jsonData.cardDto.node_id);\r",
									"pm.environment.set(\"card_number\", jsonData.cardDto.card_number);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/me/details?fullDehydrate=1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"me",
								"details"
							],
							"query": [
								{
									"key": "fullDehydrate",
									"value": "1"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Pseudo Credit Trasaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{admin_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{user_id}}\",\r\n    \"transactionAmount\": 1000,\r\n    \"description\": \"Credit Pseudo Transaction $100\",\r\n    \"mcatransaction\": \"\",\r\n    \"transactionType\": \"CREDIT\"\r\n}"
						},
						"url": {
							"raw": "{{admin-api-gateway}}/management-service/trio/transactions/transaction/admin-trigger",
							"host": [
								"{{admin-api-gateway}}"
							],
							"path": [
								"management-service",
								"trio",
								"transactions",
								"transaction",
								"admin-trigger"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Plaid_link_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"plaid_linkToken\", jsonData.linkToken);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientName\": \"Finch\",\n    \"linkCustomizationName\": \"uat_configs\",\n    \"user\": {\n        \"legalName\": \"Vikum Warnakula\",\n        \"clientUserId\": \"{{user_id}}\",\n        \"email\": \"{{user_email}}\"\n    },\n    \"redirectUri\": \"https:\\/\\/prod.trioappcore.com\\/app\\/plaid-link\",\n    \"countryCodes\": [\n        \"US\"\n    ],\n    \"language\": \"en\",\n    \"accountFilters\": {\n        \"depository\": {\n            \"accountSubtypes\": [\n                \"checking\",\n                \"savings\"\n            ]\n        }\n    },\n    \"products\": [\n        \"auth\",\n        \"transactions\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking-node/link/link-token",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking-node",
								"link",
								"link-token"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "plaid_get_details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"external_account_id\", jsonData.nodeId);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"link_open_id\": \"59c025bb-1342-4772-8065-d0fcc75493ed\",\n    \"link_persistent_id\": \"cc8b4596-ab31-46fc-aa53-e673d0547358\",\n    \"link_version\": \"2.0.1124\",\n    \"link_token\": \"{{plaid_linkToken}}\",\n    \"initial_products\": null,\n    \"user\": {},\n    \"options\": {},\n    \"integration_mode\": 3,\n    \"link_sdk_version\": \"2.1.3\"\n}"
						},
						"url": {
							"raw": "https://sandbox.plaid.com/link/client/get",
							"protocol": "https",
							"host": [
								"sandbox",
								"plaid",
								"com"
							],
							"path": [
								"link",
								"client",
								"get"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "plaid_bankLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"plaid_public_token\", jsonData.public_token);\r",
									"pm.environment.set(\"plaid_account_id\", jsonData.accounts[0].account_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"link_token\": \"{{plaid_linkToken}}\",\n    \"credentials\": {\n        \"username\": \"user_good\",\n        \"password\": \"pass_good\"\n    },\n    \"flexible_input_responses\": null,\n    \"initial_products\": [\n        \"auth\",\n        \"transactions\"\n    ],\n    \"institution_id\": \"ins_3\",\n    \"link_open_id\": \"59c025bb-1342-4772-8065-d0fcc75493ed\",\n    \"link_persistent_id\": \"cc8b4596-ab31-46fc-aa53-e673d0547358\",\n    \"link_session_id\": \"cee6924e-f699-45a5-b16b-f82a57407c2e\",\n    \"display_language\": \"en\",\n    \"options\": {\n        \"link_configuration\": {\n            \"version\": \"1.0\",\n            \"userConfig\": {\n                \"env\": \"sandbox\",\n                \"isMobile\": true,\n                \"isWebview\": true,\n                \"isIosSdkInProcessWebview\": true,\n                \"linkSdkVersion\": \"2.1.3\",\n                \"token\": \"link-sandbox-ad8c6902-9557-45af-bc1e-53d108959b1e\",\n                \"product\": [\n                    \"auth\",\n                    \"transactions\"\n                ],\n                \"webhook\": \"https://uat.trioappcore.com/api/infrastructure-service/webhooks/public/plaid/event\",\n                \"countryCodes\": [\n                    \"US\"\n                ],\n                \"language\": \"en\",\n                \"clientName\": \"Finch\",\n                \"accountSubtypes\": {\n                    \"depository\": [\n                        \"checking\",\n                        \"savings\"\n                    ]\n                },\n                \"paymentToken\": null,\n                \"institutionId\": null,\n                \"isInitializedWithLinkToken\": true,\n                \"optionalProducts\": [],\n                \"microdepositsEnabledOverride\": true,\n                \"oauthRedirectUri\": \"https://prod.trioappcore.com/app/plaid-link\",\n                \"publicToken\": null,\n                \"apiVersion\": \"v2\",\n                \"customizations\": null\n            },\n            \"selectedInstitution\": {\n                \"accountLocked\": null,\n                \"accountSetup\": \"https://secure01a.chase.com/web/auth/enrollment#/enroll/onlineEnrollment/gettingStarted/index?LOB=RGBLogon\",\n                \"brandName\": \"Chase\",\n                \"brandSubheading\": null,\n                \"colors\": {\n                    \"dark\": \"#085095\",\n                    \"darker\": \"#002e71\",\n                    \"light\": \"#3a72c1\",\n                    \"primary\": \"#095aa6\"\n                },\n                \"fields\": [\n                    {\n                        \"label\": \"User ID\",\n                        \"name\": \"username\",\n                        \"type\": \"text\"\n                    },\n                    {\n                        \"label\": \"Password\",\n                        \"name\": \"password\",\n                        \"type\": \"password\"\n                    }\n                ],\n                \"forgottenPassword\": \"https://secure01a.chase.com/web/auth/#/logon/forgotLoginDetails/identifyCustomer?lang=en\",\n                \"healthStatus\": \"HEALTH_STATUS_GREEN\",\n                \"highlightReason\": \"\",\n                \"id\": \"chase\",\n                \"inputSpec\": \"fixed\",\n                \"legacyInstitutionCode\": null,\n                \"legacyInstitutionCodeOrType\": \"chase\",\n                \"legacyInstitutionType\": \"chase\",\n                \"logo\": \"iVBORw0KGgoAAAANSUhEUgAAAJgAAACYCAMAAAAvHNATAAAANlBMVEVHcEwOW6f///8IVqUPW6gQXKgRXKkPW6gTYKwPW6gbYqsxcbJ3ocza5vDs8/b0+Pmlwt1Vir96WNmQAAAACnRSTlMA////5HhLoCDGuAtrFAAABQNJREFUeNrt3H9vpCAQBuACIuC6wn7/L3vuXttb8UX5MdjJpVya3D9tngDiqDPz8dE67KiNcc4NgxDDsP7HGD3aj58cVhu3avAYnNE/wbOjSZredObauctCveGuWsAC1aet/6Ja7UTVcF1t1oiGYSxLVjdaO6sLjYZFT9OTIBuTpju2nCAdbmS2irTrOQ6iwxiaJ02LTqNtp9n07lJT7kjtNNtjGdUt3JfMMSvq5Uwvo3osMn+kZLXLaTDp9jyL7rJkBJGgGTKXeCw3teqKXH6VCTKZw/Pl/RM2y8KRnDNHcjk+t1YdTIZJUVycdsCX4rrlK2Fp2WBb11Hcnlu+FibvU/tq4nV8uaphXt5vrTJz4KqfMemTMtNyTny6GmBStsnwef99pLbA5JKSZdwDRnzH/j7qm2ByeSRkY9VBoaYgKWA+LTs9NNAFqUSQkmbG1t9PyFzNBguSDiZ9ItjQxRts42qHJWVj6QYLkhaWCtAOtpk5d5HAEjJTtJCxgQSWCNDG/CtyT6CB4QDNZV+RQEAEwzJ4ZdoJBazdYDBAm2zWzkcuOhgM0MD+t3kuQphHMns+YYlnRzoYDNDM6YS9Avy+MBig2bMJS7hoYUBmjifsK5DuDQNhkD2asLSLGuZ3MnMwYQcuahiYM5s+9NdA2l8G24WOOnWXVIfvcuhhcYDmEiv5HuBfA4vDIAtX8uXyJ7DHnXg88FoOyUAaw8REPjahLAwQg8yArSFL0b+/v5L8UYmA0aQD6RSs7zC7lVx3te8CU2dDgLW04A0FMWwKx2OO/qiNt1gnmLqdrUP0MWCMt1g32FJ2/Jv4sPg5mAwq3mRWsIDdp3iTaY4wHYVibGAmiizYwFx0o2QDe+5+wREmoliMD8xuQws+sHEb7vOB6e2DGx+Y4QtzPGHuF1YMG3jCBr4wwRMm+MJ+91gp7Pcc+29gv9FFKYxtoMg2tGb7MML28Y3vAy/bVwRsX6qwfQ3F9sUdk1edG9jA5+XwFmbi1+mKCWyMP0BkfO+7BGb3H98CB9gAvtRP890fjqUTbJn2H7m2eWPT7XjUfOLK+DLyPmMj/JAqSr6TkcHeM0OG/jU+2bDNBtHwY70iHxmwbe6FRekN6jETj+fH/RPY1uVwQsitrIAmK3XhBBZlhGicQnOSdtEBFmeq2FTSEbHsDBYnEpuDNK1wHczvknXtUWJbuG7GZnWcC7hN71HhKtiszrInzVY2XwML6jTf1J7kWHeBhdPcSZANOPvusH1as8lIacb5uZSwkJfSvLuVE8mSMJBsrfPS5svqTkthwOVyCw1IZBDmYQr4mFuaoRTBLR3PWGZqerKYhUAGYagK7qhmahT0MgSD1XljWcFUswzAoEuXlpg9AzRPCoNPgK6iKK8tQNvBYF3eeSXvKIhlMQzXC45VhZ+qJUCLYLhaUNeWyjYEaFsYdjUU8dbLtrC5wYVrzapDx3cYrmBsLRSf606Nd1irK1FoObfCoGsoa0YAa3mrArR/sADnq7SDCZYtDbDQuo5H12aF7AsG6xapWoSoCtknDNagVrnw+7zyYOMF87DdRXXvHtgep1D2Kn65IVdLtyN0cRbO2WvLT8Dl2vpD6TbZkuw/09zsCyynmkrec8IxEHT6svDqzH8zDK9GmrZt1Y3RUj1U6Do+Mm0lx7j5Ht92hYwbPDJuicm4iSjjtqucG9Vybu37vagMmyG/z12X9tF/APITr9CCbDsMAAAAAElFTkSuQmCC\",\n                \"mfaCodeType\": \"numeric\",\n                \"name\": \"Chase\",\n                \"nameBreak\": null,\n                \"oauth\": false,\n                \"oauthLoginUrl\": null,\n                \"isNoResponseFlexInput\": false,\n                \"products\": {\n                    \"auth\": true,\n                    \"connect\": true,\n                    \"income\": true,\n                    \"info\": true,\n                    \"account_verify\": true,\n                    \"assets\": true,\n                    \"bank_transfer\": false,\n                    \"ddta\": false,\n                    \"deposit_switch\": false,\n                    \"holdings\": false,\n                    \"income_verification\": false,\n                    \"investments_auth\": false,\n                    \"investments\": true,\n                    \"liabilities\": true,\n                    \"payment_initiation\": false,\n                    \"sba_verification\": false,\n                    \"liabilities_report\": false\n                },\n                \"type\": \"chase\",\n                \"url\": \"https://www.chase.com\",\n                \"countryCodes\": [\n                    \"US\"\n                ],\n                \"mobileAuth\": false,\n                \"filterType\": \"FILTER_TYPE_NULL\"\n            },\n            \"isCustomInitializer\": false,\n            \"isPatch\": false\n        },\n        \"webhook\": \"https://uat.trioappcore.com/api/infrastructure-service/webhooks/public/plaid/event\",\n        \"use_public_token_nonce\": false\n    },\n    \"payment_token\": null,\n    \"integration_mode\": 3,\n    \"link_sdk_version\": \"2.1.3\"\n}"
						},
						"url": {
							"raw": "https://sandbox.plaid.com/link/item/create",
							"protocol": "https",
							"host": [
								"sandbox",
								"plaid",
								"com"
							],
							"path": [
								"link",
								"item",
								"create"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Plaid_linkAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"external_account_id\", jsonData.nodeId);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publicToken\": \"{{plaid_public_token}}\",\n    \"accountName\": \"Plaid Saving\",\n    \"institutionId\": \"ins_3\",\n    \"plaidAccountIds\": [\n        \"{{plaid_account_id}}\"\n    ],\n    \"accountMask\": \"1111\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking-node/link/access-token",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking-node",
								"link",
								"access-token"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get_Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData[0].nodeId)\r",
									"pm.environment.set(\"external_account_id\", jsonData[0].nodeId);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Deposit Money From Plaid Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"toNodeId\": \"-ta-\",\n    \"currency\": \"USD\",\n    \"fromNodeId\": \"{{external_account_id}}\",\n    \"note\": \"Deposit to Finch : Plaid Linked Saving\",\n    \"toNodeType\": \"DEPOSIT-US\",\n    \"amount\": 15,\n    \"fromNodeType\": \"ACH-US\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "ATM withdraw",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let skipTest = pm.environment.get('skipTest');\r",
									"\r",
									"(skipTest ? pm.test.skip : pm.test)(\"Check status code\", () => {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Verify ATM Transaction is success\",function () {  \r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"if(jsonData.success=false){\r",
									"    console.log(\"Error : \"+jsonData.error.message)\r",
									"}\r",
									"setTimeout(function(){}, 60000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"authentication\": {\n\t\t\"account_number\": \"{{card_number}}\",\n\t\t\"accountholder_billing_address\": \"\",\n\t\t\"accountholder_billing_zipcode\": \"12343\",\n\t\t\"cvv\": \"\",\n\t\t\"expiration_date\": \"{{expiredate_synapse}}\",\n\t\t\"merchant_security_code\": \"12345\",\n\t\t\"authorization_code\": \"123456\",\n\t\t\"pin\": \"1234\"\n\t},\n\t\"amount\": {\n\t\t\"debit\": true,\n\t\t\"transaction_currency\": \"USD\",\n\t\t\"transaction_value\": 1200,\n\t\t\"settlement_currency\": \"USD\",\n\t\t\"settlement_currency_conversion_rate\": \"1\",\n\t\t\"settlement_value\": 1200\n\t},\n\t\"meta\": {\n\t\t\"card_acceptor\": {\n\t\t\t\"acquirer_id\": \"3311644648\",\n\t\t\t\"mcc\": \"6011\",\n\t\t\t\"address\": {\n\t\t\t\t\"street\": \"#601 MISSION ST\",\n\t\t\t\t\"city\": \"SAN FRANCISCO\",\n\t\t\t\t\"state\": \"CA\",\n\t\t\t\t\"country\": \"US\"\n\t\t\t},\n\t\t\t\"name\": \"Bank of America\",\n\t\t\t\"terminal_id\": \"100\",\n\t\t\t\"merchant_number\": \"123456\"\n\t\t},\n\t\t\"is_force_post\": false,\n\t\t\"is_recurring\": true,\n\t\t\"merchant_name\": \"Bank of America\",\n\t\t\"partial_approval_allowed\": false,\n\t\t\"point_of_service\": {\n\t\t\t\"condition_code\": \"\",\n\t\t\t\"pan_entry_mode\": \"INTEGRATED_CIRCUIT_CARD\",\n\t\t\t\"pin_entry_mode\": \"PIN_ENTRY_CAPABILITY\",\n\t\t\t\"presentment\": {\n\t\t\t\t\"card_presence\": \"CARD_PRESENT\",\n\t\t\t\t\"cardholder_presence\": \"CUSTOMER_PRESENT\",\n\t\t\t\t\"security_concern\": \"IDENTIFICATION_VERIFIED\",\n\t\t\t\t\"type\": \"ORIGINAL_PRESENTMENT\"\n\t\t\t},\n\t\t\t\"terminal\": {\n\t\t\t\t\"attendance\": \"UNATTENDED\",\n\t\t\t\t\"card_input_capability\": \"MAG_STRIPE_AND_EMV\",\n\t\t\t\t\"card_retention_capability\": \"DEVICE_CANNOT_RETAIN_CARD\",\n\t\t\t\t\"location\": \"OFF_PREMISE\",\n\t\t\t\t\"operator\": \"CUSTOMER_OPERATED\",\n\t\t\t\t\"type\": \"ATM\"\n\t\t\t}\n\t\t},\n\t\t\"type\": \"CASH\"\n\t}\n}"
						},
						"url": {
							"raw": "https://uat-terminal.synapsefi.com/v1/transactions",
							"protocol": "https",
							"host": [
								"uat-terminal",
								"synapsefi",
								"com"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Physical Card Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subnetId\": \"{{subnet_id}}\",\r\n    \"nodeId\": \"{{node_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/cards/ship",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"cards",
								"ship"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Profile monitoring flagged users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"var logged_userid = pm.environment.get(\"user_id\");\r",
									"var flagged_reason = \"Early user | Transfers out (within 3 weeks)\";\r",
									"var user_flagged = false;\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"var flagged_reason_count = jsonData.content[0].flaggedReasons.length;\r",
									"console.log(\"Flaggeed Reason Count : \"+flagged_reason_count);\r",
									"/*\r",
									"early users flagged  should be address with flagged_reason \"Early user | Transfers out (within 3 weeks)\" and user id\r",
									"it will take around 8 minutes to return a transaction from synapse side\r",
									"*/\r",
									"\r",
									"for(var i = 0; i < flagged_reason_count; i++) {\r",
									"\r",
									"    if((jsonData.content[0].user.id == logged_userid) && (jsonData.content[0].flaggedReasons[i] == flagged_reason)){\r",
									"        user_flagged = true;\r",
									"        console.log(\"Flagged User : \"+logged_userid+\" flagged Reasons : \"+flagged_reason);\r",
									"        console.log(jsonData.content[0].flaggedReasons[i]);\r",
									"    }\r",
									"}\r",
									"pm.test(\"Verify Early user Flagged\", function () { \r",
									"    pm.expect(user_flagged).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://uat.trioappcore.com/api/management-service/trio/transactions/profilemonitoring/all?page=0&size=20&searchTerm=username,{{user_email}},=&sortSeq=createdDate;desc",
							"protocol": "https",
							"host": [
								"uat",
								"trioappcore",
								"com"
							],
							"path": [
								"api",
								"management-service",
								"trio",
								"transactions",
								"profilemonitoring",
								"all"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "searchTerm",
									"value": "username,{{user_email}},="
								},
								{
									"key": "sortSeq",
									"value": "createdDate;desc"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "As Finch Customer Support, I want users who have transferred funds in and transferred funds out (within 3 weeks of opening their account) to be flagged to be reviewed, so that I can review the account\r\n\r\nUser is flagged to be reviewed when all of following criteria is met\r\n-User account is less than 3 weeks old\r\n-User has \"transferred funds in\" and \"transferred funds out\""
		},
		{
			"name": "Returned Transactions Flag (FD-11)",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{user_email}}",
									"type": "text"
								},
								{
									"key": "current_app_version",
									"value": "0.1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Get user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"subnet_id\", jsonData.cardDto._id);\r",
									"pm.environment.set(\"node_id\", jsonData.cardDto.node_id);\r",
									"pm.environment.set(\"card_number\", jsonData.cardDto.card_number);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/me/details?fullDehydrate=1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"me",
								"details"
							],
							"query": [
								{
									"key": "fullDehydrate",
									"value": "1"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Deposit money using Linked Saving Acc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"transactionId\", jsonData.transactionId);\r",
									"\r",
									"setTimeout(function(){}, 480000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"currency\": \"USD\",\r\n    \"note\": \"Deposit to FINCH : Linked Saving Account\",\r\n    \"toNodeType\": \"DEPOSIT-US\",\r\n    \"fromNodeId\": \"{{external_account_id}}\",\r\n    \"toNodeId\": \"-ta-\",\r\n    \"amount\": 10.41,\r\n    \"fromNodeType\": \"ACH-US\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get User Transaction History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"var transactionId = pm.environment.get(\"transactionId\");\r",
									"console.log(transactionId)\r",
									"var isTransactionSettled = false;\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var transaction_count = jsonData.length;\r",
									"console.log(\"Transaction count : \"+transaction_count)\r",
									"\r",
									"/*\r",
									"Verify whether previous transaction is settled with the synapse side\r",
									"*/\r",
									"\r",
									"for(var i = 0; i < transaction_count; i++) {\r",
									"\r",
									"    if(jsonData[i].providerTransactionId == transactionId){\r",
									"        console.log(jsonData[i].providerTransactionId)\r",
									"        if(jsonData[i].transactionStatus == \"SETTLED\"){\r",
									"                isTransactionSettled = true;\r",
									"                console.log(\"Transaction has settled.\");\r",
									"        }\r",
									"        else{\r",
									"            console.log(\"This transactions is not yet settled. still on \"+jsonData[i].transactionStatus+\" State.\")\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.test(\"Verify whether Transaction settled.\", function () {\r",
									"    pm.expect(isTransactionSettled).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							],
							"query": [
								{
									"key": "transactionTypes",
									"value": "{{transcationTypes}}",
									"disabled": true
								},
								{
									"key": "transactionStatuses",
									"value": "{{transactionStatuses}}",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile monitoring flagged users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"var logged_userid = pm.environment.get(\"user_id\");\r",
									"var flagged_reason = 'Returned transaction after it initially settled';\r",
									"var user_flagged = false;\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"var flagged_user_count = jsonData.content.length;\r",
									"console.log(\"Flagged User Count in DB :\"+flagged_user_count)\r",
									"\r",
									"var flagged_reason_count = jsonData.content[0].flaggedReasons.length;\r",
									"console.log(\"Flaggeed Reason Count : \"+flagged_reason_count);\r",
									"\r",
									"/*\r",
									"Returned Trasactions flagged  should be address with flagged_reason \"Returned transaction after it initially settled\" and user id\r",
									"it will take around 8 minutes to return a transaction from synapse side\r",
									"*/\r",
									"\r",
									"for(var i = 0; i < flagged_reason_count; i++) {\r",
									"   // console.log(jsonData.content[i].flaggedReasons[0])\r",
									"   if((jsonData.content[0].user.id == logged_userid) && (jsonData.content[0].flaggedReasons[i] == flagged_reason)) {\r",
									"        user_flagged = true;\r",
									"        console.log(\"Flagged User : \"+logged_userid+\" flagged Reasons : \"+flagged_reason);\r",
									"        console.log(\"User email : \"+jsonData.content[0].user.username)\r",
									"    }\r",
									"}\r",
									"pm.test(\"Returned Transaction user Flagging\", function () { \r",
									"    pm.expect(user_flagged).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://uat.trioappcore.com/api/management-service/trio/transactions/profilemonitoring/all?page=0&size=20&searchTerm=username,{{user_email}},=&sortSeq=createdDate;desc",
							"protocol": "https",
							"host": [
								"uat",
								"trioappcore",
								"com"
							],
							"path": [
								"api",
								"management-service",
								"trio",
								"transactions",
								"profilemonitoring",
								"all"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "20"
								},
								{
									"key": "searchTerm",
									"value": "username,{{user_email}},="
								},
								{
									"key": "sortSeq",
									"value": "createdDate;desc"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "As Finch Customer Support, I want users who have had transaction statuses changed to 'returned' within 3 days of being 'settled'.\r\n\r\nUser is flagged to be reviewed when following criteria is met\r\n-User must have had a transaction status changed to ‘returned’ within a 3 day period after initially being ‘settled’ (regardless of whether it is a transfer in or transfer out).\r\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DepositeFlows",
			"item": [
				{
					"name": "Login_Reusable_User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								},
								{
									"key": "current_app_version",
									"value": "0.1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Get user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"subnet_id\", jsonData.cardDto._id);\r",
									"pm.environment.set(\"node_id\", jsonData.cardDto.node_id);\r",
									"\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/v2/me/details?fullDehydrate=1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"v2",
								"me",
								"details"
							],
							"query": [
								{
									"key": "fullDehydrate",
									"value": "1"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Active Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 30000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"subnetId\": \"{{subnet_id}}\",\r\n    \"nodeId\": \"{{node_id}}\",\r\n    \"status\": \"ACTIVE\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/cards/status",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"cards",
								"status"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Admin portal login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"admin_access_token\", jsonData.access_token);\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{admin-api-gateway}}/uaa/oauth/token?noAuth=true",
							"host": [
								"{{admin-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "noAuth",
									"value": "true"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"subnet_id\", jsonData.cardDto._id);\r",
									"pm.environment.set(\"node_id\", jsonData.cardDto.node_id);\r",
									"pm.environment.set(\"card_number\", jsonData.cardDto.card_number);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/me/details?fullDehydrate=1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"me",
								"details"
							],
							"query": [
								{
									"key": "fullDehydrate",
									"value": "1"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Admin MCA Credit Trasaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{admin_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": \"{{user_id}}\",\r\n    \"transactionAmount\": 10,\r\n    \"description\": \"Credit MCA  Transaction $10\",\r\n    \"mcatransaction\": \"true\",\r\n    \"transactionType\": \"CREDIT\"\r\n}"
						},
						"url": {
							"raw": "{{admin-api-gateway}}/management-service/trio/transactions/transaction/admin-trigger",
							"host": [
								"{{admin-api-gateway}}"
							],
							"path": [
								"management-service",
								"trio",
								"transactions",
								"transaction",
								"admin-trigger"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Add debit card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"external_account_id\", jsonData[0].nodeId);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | Debit Card\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"expDate\": \"I\\/Am31H7Fy\\/QfxV6338RoqAZ5Kj\\/H8ACSFjGcuORXSOfR4nQ+camrkC3uHZPUKLgA7drOIfYQRQIj\\/q3XjBjjrxlndQGp0egm\\/2fdfzdsDLx62dyR0+MWNrlY5OemmTdkl5pMiAFFbZ9SOJ+g6Vhp2wTDj4zKOZYANlaj3hdtgPLD9e2ZXoi5BTMzwukCAMLIa7gSRWdgMV\\/oCqslYjjy3cENohmZY5wi+Lw1nbApE2X33K0X6BRpspf0CfTF+yMEaG\\/CBorPsCwDepkFvPUxr+IMbm9JkFaEzhu\\/YM9mhDky8MGFzWvkNXNpRniGdzedJReS7Zf2hg75vSjf+9O3w==\",\n    \"nickname\": \"XXXX 9995\",\n    \"cardNumber\": \"b\\/Fr\\/pt1VqrGyHQn5AWEXIjgcdnq+aFapVifY6thWRJ7nIyY7F7BFXu3xu3NFcA03n4V0JjGVTFwNue+hWLTTPL8pK1Tu3bhta9AE8Mnq\\/MzF2XsCbmMnuNOrBQZ0ceOtyrjZ5CnTB4TiwODsxU1h0nWVZjwl6\\/mRcS8NA+k3toOWmfTNdgbnjOESxb6b\\/ktigK5Bc6Zec+oQLRUn\\/6nF36ywbZphFJnKmsSt0lHr4\\/CVyS5G65nkEc5GkpkyTMxM\\/qMZ7EDsjgJ6tj6+1Glzz1WcDhDGy4ws9as2a9szfyv6wmnijLTEzXXIsUORKnS\\/px1FDe+YAiFUmV7Aozk\\/g==\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/node/interchange",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"node",
								"interchange"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit money using debit card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 30000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"amount\": 100.00,\r\n  \"currency\": \"USD\",\r\n  \"toNodeId\": \"-ta-\",\r\n  \"note\": \"Deposit to FINCH : Debit Card\",\r\n  \"toNodeType\": \"DEPOSIT-US\",\r\n  \"fromNodeId\": \"{{external_account_id}}\",\r\n  \"fromNodeType\": \"INTERCHANGE-US\",\r\n  \"label\": \"DEBIT-CARD\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Plaid_link_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"plaid_linkToken\", jsonData.linkToken);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientName\": \"Finch\",\n    \"linkCustomizationName\": \"uat_configs\",\n    \"user\": {\n        \"legalName\": \"Vikum Warnakula\",\n        \"clientUserId\": \"{{user_id}}\",\n        \"email\": \"{{user_email}}\"\n    },\n    \"redirectUri\": \"https:\\/\\/prod.trioappcore.com\\/app\\/plaid-link\",\n    \"countryCodes\": [\n        \"US\"\n    ],\n    \"language\": \"en\",\n    \"accountFilters\": {\n        \"depository\": {\n            \"accountSubtypes\": [\n                \"checking\",\n                \"savings\"\n            ]\n        }\n    },\n    \"products\": [\n        \"auth\",\n        \"transactions\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking-node/link/link-token",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking-node",
								"link",
								"link-token"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "plaid_get_details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"external_account_id\", jsonData.nodeId);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"link_open_id\": \"59c025bb-1342-4772-8065-d0fcc75493ed\",\n    \"link_persistent_id\": \"cc8b4596-ab31-46fc-aa53-e673d0547358\",\n    \"link_version\": \"2.0.1124\",\n    \"link_token\": \"{{plaid_linkToken}}\",\n    \"initial_products\": null,\n    \"user\": {},\n    \"options\": {},\n    \"integration_mode\": 3,\n    \"link_sdk_version\": \"2.1.3\"\n}"
						},
						"url": {
							"raw": "https://sandbox.plaid.com/link/client/get",
							"protocol": "https",
							"host": [
								"sandbox",
								"plaid",
								"com"
							],
							"path": [
								"link",
								"client",
								"get"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "plaid_bankLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"plaid_public_token\", jsonData.public_token);\r",
									"pm.environment.set(\"plaid_account_id\", jsonData.accounts[0].account_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"link_token\": \"{{plaid_linkToken}}\",\n    \"credentials\": {\n        \"username\": \"user_good\",\n        \"password\": \"pass_good\"\n    },\n    \"flexible_input_responses\": null,\n    \"initial_products\": [\n        \"auth\",\n        \"transactions\"\n    ],\n    \"institution_id\": \"ins_3\",\n    \"link_open_id\": \"59c025bb-1342-4772-8065-d0fcc75493ed\",\n    \"link_persistent_id\": \"cc8b4596-ab31-46fc-aa53-e673d0547358\",\n    \"link_session_id\": \"cee6924e-f699-45a5-b16b-f82a57407c2e\",\n    \"display_language\": \"en\",\n    \"options\": {\n        \"link_configuration\": {\n            \"version\": \"1.0\",\n            \"userConfig\": {\n                \"env\": \"sandbox\",\n                \"isMobile\": true,\n                \"isWebview\": true,\n                \"isIosSdkInProcessWebview\": true,\n                \"linkSdkVersion\": \"2.1.3\",\n                \"token\": \"link-sandbox-ad8c6902-9557-45af-bc1e-53d108959b1e\",\n                \"product\": [\n                    \"auth\",\n                    \"transactions\"\n                ],\n                \"webhook\": \"https://uat.trioappcore.com/api/infrastructure-service/webhooks/public/plaid/event\",\n                \"countryCodes\": [\n                    \"US\"\n                ],\n                \"language\": \"en\",\n                \"clientName\": \"Finch\",\n                \"accountSubtypes\": {\n                    \"depository\": [\n                        \"checking\",\n                        \"savings\"\n                    ]\n                },\n                \"paymentToken\": null,\n                \"institutionId\": null,\n                \"isInitializedWithLinkToken\": true,\n                \"optionalProducts\": [],\n                \"microdepositsEnabledOverride\": true,\n                \"oauthRedirectUri\": \"https://prod.trioappcore.com/app/plaid-link\",\n                \"publicToken\": null,\n                \"apiVersion\": \"v2\",\n                \"customizations\": null\n            },\n            \"selectedInstitution\": {\n                \"accountLocked\": null,\n                \"accountSetup\": \"https://secure01a.chase.com/web/auth/enrollment#/enroll/onlineEnrollment/gettingStarted/index?LOB=RGBLogon\",\n                \"brandName\": \"Chase\",\n                \"brandSubheading\": null,\n                \"colors\": {\n                    \"dark\": \"#085095\",\n                    \"darker\": \"#002e71\",\n                    \"light\": \"#3a72c1\",\n                    \"primary\": \"#095aa6\"\n                },\n                \"fields\": [\n                    {\n                        \"label\": \"User ID\",\n                        \"name\": \"username\",\n                        \"type\": \"text\"\n                    },\n                    {\n                        \"label\": \"Password\",\n                        \"name\": \"password\",\n                        \"type\": \"password\"\n                    }\n                ],\n                \"forgottenPassword\": \"https://secure01a.chase.com/web/auth/#/logon/forgotLoginDetails/identifyCustomer?lang=en\",\n                \"healthStatus\": \"HEALTH_STATUS_GREEN\",\n                \"highlightReason\": \"\",\n                \"id\": \"chase\",\n                \"inputSpec\": \"fixed\",\n                \"legacyInstitutionCode\": null,\n                \"legacyInstitutionCodeOrType\": \"chase\",\n                \"legacyInstitutionType\": \"chase\",\n                \"logo\": \"iVBORw0KGgoAAAANSUhEUgAAAJgAAACYCAMAAAAvHNATAAAANlBMVEVHcEwOW6f///8IVqUPW6gQXKgRXKkPW6gTYKwPW6gbYqsxcbJ3ocza5vDs8/b0+Pmlwt1Vir96WNmQAAAACnRSTlMA////5HhLoCDGuAtrFAAABQNJREFUeNrt3H9vpCAQBuACIuC6wn7/L3vuXttb8UX5MdjJpVya3D9tngDiqDPz8dE67KiNcc4NgxDDsP7HGD3aj58cVhu3avAYnNE/wbOjSZredObauctCveGuWsAC1aet/6Ja7UTVcF1t1oiGYSxLVjdaO6sLjYZFT9OTIBuTpju2nCAdbmS2irTrOQ6iwxiaJ02LTqNtp9n07lJT7kjtNNtjGdUt3JfMMSvq5Uwvo3osMn+kZLXLaTDp9jyL7rJkBJGgGTKXeCw3teqKXH6VCTKZw/Pl/RM2y8KRnDNHcjk+t1YdTIZJUVycdsCX4rrlK2Fp2WBb11Hcnlu+FibvU/tq4nV8uaphXt5vrTJz4KqfMemTMtNyTny6GmBStsnwef99pLbA5JKSZdwDRnzH/j7qm2ByeSRkY9VBoaYgKWA+LTs9NNAFqUSQkmbG1t9PyFzNBguSDiZ9ItjQxRts42qHJWVj6QYLkhaWCtAOtpk5d5HAEjJTtJCxgQSWCNDG/CtyT6CB4QDNZV+RQEAEwzJ4ZdoJBazdYDBAm2zWzkcuOhgM0MD+t3kuQphHMns+YYlnRzoYDNDM6YS9Avy+MBig2bMJS7hoYUBmjifsK5DuDQNhkD2asLSLGuZ3MnMwYQcuahiYM5s+9NdA2l8G24WOOnWXVIfvcuhhcYDmEiv5HuBfA4vDIAtX8uXyJ7DHnXg88FoOyUAaw8REPjahLAwQg8yArSFL0b+/v5L8UYmA0aQD6RSs7zC7lVx3te8CU2dDgLW04A0FMWwKx2OO/qiNt1gnmLqdrUP0MWCMt1g32FJ2/Jv4sPg5mAwq3mRWsIDdp3iTaY4wHYVibGAmiizYwFx0o2QDe+5+wREmoliMD8xuQws+sHEb7vOB6e2DGx+Y4QtzPGHuF1YMG3jCBr4wwRMm+MJ+91gp7Pcc+29gv9FFKYxtoMg2tGb7MML28Y3vAy/bVwRsX6qwfQ3F9sUdk1edG9jA5+XwFmbi1+mKCWyMP0BkfO+7BGb3H98CB9gAvtRP890fjqUTbJn2H7m2eWPT7XjUfOLK+DLyPmMj/JAqSr6TkcHeM0OG/jU+2bDNBtHwY70iHxmwbe6FRekN6jETj+fH/RPY1uVwQsitrIAmK3XhBBZlhGicQnOSdtEBFmeq2FTSEbHsDBYnEpuDNK1wHczvknXtUWJbuG7GZnWcC7hN71HhKtiszrInzVY2XwML6jTf1J7kWHeBhdPcSZANOPvusH1as8lIacb5uZSwkJfSvLuVE8mSMJBsrfPS5svqTkthwOVyCw1IZBDmYQr4mFuaoRTBLR3PWGZqerKYhUAGYagK7qhmahT0MgSD1XljWcFUswzAoEuXlpg9AzRPCoNPgK6iKK8tQNvBYF3eeSXvKIhlMQzXC45VhZ+qJUCLYLhaUNeWyjYEaFsYdjUU8dbLtrC5wYVrzapDx3cYrmBsLRSf606Nd1irK1FoObfCoGsoa0YAa3mrArR/sADnq7SDCZYtDbDQuo5H12aF7AsG6xapWoSoCtknDNagVrnw+7zyYOMF87DdRXXvHtgep1D2Kn65IVdLtyN0cRbO2WvLT8Dl2vpD6TbZkuw/09zsCyynmkrec8IxEHT6svDqzH8zDK9GmrZt1Y3RUj1U6Do+Mm0lx7j5Ht92hYwbPDJuicm4iSjjtqucG9Vybu37vagMmyG/z12X9tF/APITr9CCbDsMAAAAAElFTkSuQmCC\",\n                \"mfaCodeType\": \"numeric\",\n                \"name\": \"Chase\",\n                \"nameBreak\": null,\n                \"oauth\": false,\n                \"oauthLoginUrl\": null,\n                \"isNoResponseFlexInput\": false,\n                \"products\": {\n                    \"auth\": true,\n                    \"connect\": true,\n                    \"income\": true,\n                    \"info\": true,\n                    \"account_verify\": true,\n                    \"assets\": true,\n                    \"bank_transfer\": false,\n                    \"ddta\": false,\n                    \"deposit_switch\": false,\n                    \"holdings\": false,\n                    \"income_verification\": false,\n                    \"investments_auth\": false,\n                    \"investments\": true,\n                    \"liabilities\": true,\n                    \"payment_initiation\": false,\n                    \"sba_verification\": false,\n                    \"liabilities_report\": false\n                },\n                \"type\": \"chase\",\n                \"url\": \"https://www.chase.com\",\n                \"countryCodes\": [\n                    \"US\"\n                ],\n                \"mobileAuth\": false,\n                \"filterType\": \"FILTER_TYPE_NULL\"\n            },\n            \"isCustomInitializer\": false,\n            \"isPatch\": false\n        },\n        \"webhook\": \"https://uat.trioappcore.com/api/infrastructure-service/webhooks/public/plaid/event\",\n        \"use_public_token_nonce\": false\n    },\n    \"payment_token\": null,\n    \"integration_mode\": 3,\n    \"link_sdk_version\": \"2.1.3\"\n}"
						},
						"url": {
							"raw": "https://sandbox.plaid.com/link/item/create",
							"protocol": "https",
							"host": [
								"sandbox",
								"plaid",
								"com"
							],
							"path": [
								"link",
								"item",
								"create"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Plaid_linkAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publicToken\": \"{{plaid_public_token}}\",\n    \"accountName\": \"Plaid Saving\",\n    \"institutionId\": \"ins_3\",\n    \"plaidAccountIds\": [\n        \"{{plaid_account_id}}\"\n    ],\n    \"accountMask\": \"1111\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking-node/link/access-token",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking-node",
								"link",
								"access-token"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get_Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData[0].nodeId)\r",
									"pm.environment.set(\"external_account_id\", jsonData[0].nodeId);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Deposit Money From Plaid Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"toNodeId\": \"-ta-\",\n    \"currency\": \"USD\",\n    \"fromNodeId\": \"{{external_account_id}}\",\n    \"note\": \"Deposit to Finch : Plaid Linked Checking\",\n    \"toNodeType\": \"DEPOSIT-US\",\n    \"amount\": 15,\n    \"fromNodeType\": \"ACH-US\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "plaid_bankLogin2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"plaid_public_token\", jsonData.public_token);\r",
									"pm.environment.set(\"plaid_account_id\", jsonData.accounts[1].account_id);\r",
									"console.log(jsonData.accounts[1].account_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"link_token\": \"{{plaid_linkToken}}\",\n    \"credentials\": {\n        \"username\": \"user_good\",\n        \"password\": \"pass_good\"\n    },\n    \"flexible_input_responses\": null,\n    \"initial_products\": [\n        \"auth\",\n        \"transactions\"\n    ],\n    \"institution_id\": \"ins_3\",\n    \"link_open_id\": \"59c025bb-1342-4772-8065-d0fcc75493ed\",\n    \"link_persistent_id\": \"cc8b4596-ab31-46fc-aa53-e673d0547358\",\n    \"link_session_id\": \"cee6924e-f699-45a5-b16b-f82a57407c2e\",\n    \"display_language\": \"en\",\n    \"options\": {\n        \"link_configuration\": {\n            \"version\": \"1.0\",\n            \"userConfig\": {\n                \"env\": \"sandbox\",\n                \"isMobile\": true,\n                \"isWebview\": true,\n                \"isIosSdkInProcessWebview\": true,\n                \"linkSdkVersion\": \"2.1.3\",\n                \"token\": \"link-sandbox-ad8c6902-9557-45af-bc1e-53d108959b1e\",\n                \"product\": [\n                    \"auth\",\n                    \"transactions\"\n                ],\n                \"webhook\": \"https://uat.trioappcore.com/api/infrastructure-service/webhooks/public/plaid/event\",\n                \"countryCodes\": [\n                    \"US\"\n                ],\n                \"language\": \"en\",\n                \"clientName\": \"Finch\",\n                \"accountSubtypes\": {\n                    \"depository\": [\n                        \"checking\",\n                        \"savings\"\n                    ]\n                },\n                \"paymentToken\": null,\n                \"institutionId\": null,\n                \"isInitializedWithLinkToken\": true,\n                \"optionalProducts\": [],\n                \"microdepositsEnabledOverride\": true,\n                \"oauthRedirectUri\": \"https://prod.trioappcore.com/app/plaid-link\",\n                \"publicToken\": null,\n                \"apiVersion\": \"v2\",\n                \"customizations\": null\n            },\n            \"selectedInstitution\": {\n                \"accountLocked\": null,\n                \"accountSetup\": \"https://secure01a.chase.com/web/auth/enrollment#/enroll/onlineEnrollment/gettingStarted/index?LOB=RGBLogon\",\n                \"brandName\": \"Chase\",\n                \"brandSubheading\": null,\n                \"colors\": {\n                    \"dark\": \"#085095\",\n                    \"darker\": \"#002e71\",\n                    \"light\": \"#3a72c1\",\n                    \"primary\": \"#095aa6\"\n                },\n                \"fields\": [\n                    {\n                        \"label\": \"User ID\",\n                        \"name\": \"username\",\n                        \"type\": \"text\"\n                    },\n                    {\n                        \"label\": \"Password\",\n                        \"name\": \"password\",\n                        \"type\": \"password\"\n                    }\n                ],\n                \"forgottenPassword\": \"https://secure01a.chase.com/web/auth/#/logon/forgotLoginDetails/identifyCustomer?lang=en\",\n                \"healthStatus\": \"HEALTH_STATUS_GREEN\",\n                \"highlightReason\": \"\",\n                \"id\": \"chase\",\n                \"inputSpec\": \"fixed\",\n                \"legacyInstitutionCode\": null,\n                \"legacyInstitutionCodeOrType\": \"chase\",\n                \"legacyInstitutionType\": \"chase\",\n                \"logo\": \"iVBORw0KGgoAAAANSUhEUgAAAJgAAACYCAMAAAAvHNATAAAANlBMVEVHcEwOW6f///8IVqUPW6gQXKgRXKkPW6gTYKwPW6gbYqsxcbJ3ocza5vDs8/b0+Pmlwt1Vir96WNmQAAAACnRSTlMA////5HhLoCDGuAtrFAAABQNJREFUeNrt3H9vpCAQBuACIuC6wn7/L3vuXttb8UX5MdjJpVya3D9tngDiqDPz8dE67KiNcc4NgxDDsP7HGD3aj58cVhu3avAYnNE/wbOjSZredObauctCveGuWsAC1aet/6Ja7UTVcF1t1oiGYSxLVjdaO6sLjYZFT9OTIBuTpju2nCAdbmS2irTrOQ6iwxiaJ02LTqNtp9n07lJT7kjtNNtjGdUt3JfMMSvq5Uwvo3osMn+kZLXLaTDp9jyL7rJkBJGgGTKXeCw3teqKXH6VCTKZw/Pl/RM2y8KRnDNHcjk+t1YdTIZJUVycdsCX4rrlK2Fp2WBb11Hcnlu+FibvU/tq4nV8uaphXt5vrTJz4KqfMemTMtNyTny6GmBStsnwef99pLbA5JKSZdwDRnzH/j7qm2ByeSRkY9VBoaYgKWA+LTs9NNAFqUSQkmbG1t9PyFzNBguSDiZ9ItjQxRts42qHJWVj6QYLkhaWCtAOtpk5d5HAEjJTtJCxgQSWCNDG/CtyT6CB4QDNZV+RQEAEwzJ4ZdoJBazdYDBAm2zWzkcuOhgM0MD+t3kuQphHMns+YYlnRzoYDNDM6YS9Avy+MBig2bMJS7hoYUBmjifsK5DuDQNhkD2asLSLGuZ3MnMwYQcuahiYM5s+9NdA2l8G24WOOnWXVIfvcuhhcYDmEiv5HuBfA4vDIAtX8uXyJ7DHnXg88FoOyUAaw8REPjahLAwQg8yArSFL0b+/v5L8UYmA0aQD6RSs7zC7lVx3te8CU2dDgLW04A0FMWwKx2OO/qiNt1gnmLqdrUP0MWCMt1g32FJ2/Jv4sPg5mAwq3mRWsIDdp3iTaY4wHYVibGAmiizYwFx0o2QDe+5+wREmoliMD8xuQws+sHEb7vOB6e2DGx+Y4QtzPGHuF1YMG3jCBr4wwRMm+MJ+91gp7Pcc+29gv9FFKYxtoMg2tGb7MML28Y3vAy/bVwRsX6qwfQ3F9sUdk1edG9jA5+XwFmbi1+mKCWyMP0BkfO+7BGb3H98CB9gAvtRP890fjqUTbJn2H7m2eWPT7XjUfOLK+DLyPmMj/JAqSr6TkcHeM0OG/jU+2bDNBtHwY70iHxmwbe6FRekN6jETj+fH/RPY1uVwQsitrIAmK3XhBBZlhGicQnOSdtEBFmeq2FTSEbHsDBYnEpuDNK1wHczvknXtUWJbuG7GZnWcC7hN71HhKtiszrInzVY2XwML6jTf1J7kWHeBhdPcSZANOPvusH1as8lIacb5uZSwkJfSvLuVE8mSMJBsrfPS5svqTkthwOVyCw1IZBDmYQr4mFuaoRTBLR3PWGZqerKYhUAGYagK7qhmahT0MgSD1XljWcFUswzAoEuXlpg9AzRPCoNPgK6iKK8tQNvBYF3eeSXvKIhlMQzXC45VhZ+qJUCLYLhaUNeWyjYEaFsYdjUU8dbLtrC5wYVrzapDx3cYrmBsLRSf606Nd1irK1FoObfCoGsoa0YAa3mrArR/sADnq7SDCZYtDbDQuo5H12aF7AsG6xapWoSoCtknDNagVrnw+7zyYOMF87DdRXXvHtgep1D2Kn65IVdLtyN0cRbO2WvLT8Dl2vpD6TbZkuw/09zsCyynmkrec8IxEHT6svDqzH8zDK9GmrZt1Y3RUj1U6Do+Mm0lx7j5Ht92hYwbPDJuicm4iSjjtqucG9Vybu37vagMmyG/z12X9tF/APITr9CCbDsMAAAAAElFTkSuQmCC\",\n                \"mfaCodeType\": \"numeric\",\n                \"name\": \"Chase\",\n                \"nameBreak\": null,\n                \"oauth\": false,\n                \"oauthLoginUrl\": null,\n                \"isNoResponseFlexInput\": false,\n                \"products\": {\n                    \"auth\": true,\n                    \"connect\": true,\n                    \"income\": true,\n                    \"info\": true,\n                    \"account_verify\": true,\n                    \"assets\": true,\n                    \"bank_transfer\": false,\n                    \"ddta\": false,\n                    \"deposit_switch\": false,\n                    \"holdings\": false,\n                    \"income_verification\": false,\n                    \"investments_auth\": false,\n                    \"investments\": true,\n                    \"liabilities\": true,\n                    \"payment_initiation\": false,\n                    \"sba_verification\": false,\n                    \"liabilities_report\": false\n                },\n                \"type\": \"chase\",\n                \"url\": \"https://www.chase.com\",\n                \"countryCodes\": [\n                    \"US\"\n                ],\n                \"mobileAuth\": false,\n                \"filterType\": \"FILTER_TYPE_NULL\"\n            },\n            \"isCustomInitializer\": false,\n            \"isPatch\": false\n        },\n        \"webhook\": \"https://uat.trioappcore.com/api/infrastructure-service/webhooks/public/plaid/event\",\n        \"use_public_token_nonce\": false\n    },\n    \"payment_token\": null,\n    \"integration_mode\": 3,\n    \"link_sdk_version\": \"2.1.3\"\n}"
						},
						"url": {
							"raw": "https://sandbox.plaid.com/link/item/create",
							"protocol": "https",
							"host": [
								"sandbox",
								"plaid",
								"com"
							],
							"path": [
								"link",
								"item",
								"create"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Plaid_linkAccount2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 10000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publicToken\": \"{{plaid_public_token}}\",\n    \"accountName\": \"Plaid Saving\",\n    \"institutionId\": \"ins_3\",\n    \"plaidAccountIds\": [\n        \"{{plaid_account_id}}\"\n    ],\n    \"accountMask\": \"0000\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking-node/link/access-token",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking-node",
								"link",
								"access-token"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "List of Nodes By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData[0].nodeId)\r",
									"pm.environment.set(\"external_account_id\", jsonData[0].nodeId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit Money From Plaid Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"toNodeId\": \"-ta-\",\n    \"currency\": \"USD\",\n    \"fromNodeId\": \"{{external_account_id}}\",\n    \"note\": \"Deposit to Finch : Plaid Linked Saving\",\n    \"toNodeType\": \"DEPOSIT-US\",\n    \"amount\": 15,\n    \"fromNodeType\": \"ACH-US\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Plaid_linkAccount2 Duplicate Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"tests[\"verify the status code\"]=responseCode.code===400;\r",
									"\r",
									"setTimeout(function(){}, 10000);\r",
									"\r",
									"pm.test(\"Verify Duplicate Plaid Accounts\", function(){\r",
									"    pm.expect(jsonData.message).to.include(\"Oops! It seems like you’ve already linked this account.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publicToken\": \"{{plaid_public_token}}\",\n    \"accountName\": \"Plaid Saving\",\n    \"institutionId\": \"ins_3\",\n    \"plaidAccountIds\": [\n        \"{{plaid_account_id}}\"\n    ],\n    \"accountMask\": \"0000\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking-node/link/access-token",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking-node",
								"link",
								"access-token"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				}
			]
		},
		{
			"name": "Recurring Deposit Flows",
			"item": [
				{
					"name": "Login_Reusable_User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								},
								{
									"key": "current_app_version",
									"value": "0.1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "get_recurring_deposits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions/recurring-deposit",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions",
								"recurring-deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "get nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData[0].nodeId)\r",
									"pm.environment.set(\"external_account_id\", jsonData[0].nodeId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "create_recurring_deposit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"frequency\": \"weekly\",\r\n    \"amount\": 25,\r\n    \"externalAccountId\": \"{{external_account_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions/recurring-deposit",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions",
								"recurring-deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_recurring_deposits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions/recurring-deposit",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions",
								"recurring-deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "get nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData[0].nodeId)\r",
									"pm.environment.set(\"external_account_id\", jsonData[1].nodeId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_recurring_deposit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"externalAccountId\": \"{{external_account_id}}\",\r\n    \"amount\": 10,\r\n    \"frequency\": \"weekly\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions/recurring-deposit",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions",
								"recurring-deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_recurring_deposit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"externalAccountId\": \"{{external_account_id}}\",\r\n    \"amount\": 10,\r\n    \"frequency\": \"weekly\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions/recurring-deposit",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions",
								"recurring-deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SpendFlows",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4&current_app_version=0.1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								},
								{
									"key": "current_app_version",
									"value": "0.1"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Get user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"subnet_id\", jsonData.cardDto._id);\r",
									"pm.environment.set(\"node_id\", jsonData.cardDto.node_id);\r",
									"pm.environment.set(\"card_number\", jsonData.cardDto.card_number);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/me/details?fullDehydrate=1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"me",
								"details"
							],
							"query": [
								{
									"key": "fullDehydrate",
									"value": "1"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Admin portal login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"admin_access_token\", jsonData.access_token);\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://uat.trioappcore.com/api/uaa/oauth/token?noAuth=true",
							"protocol": "https",
							"host": [
								"uat",
								"trioappcore",
								"com"
							],
							"path": [
								"api",
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "noAuth",
									"value": "true"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Activate debit card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{admin_access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"ACTIVE\""
						},
						"url": {
							"raw": "https://uat.trioappcore.com/api/management-service/trio/cards/status/{{user_id}}",
							"protocol": "https",
							"host": [
								"uat",
								"trioappcore",
								"com"
							],
							"path": [
								"api",
								"management-service",
								"trio",
								"cards",
								"status",
								"{{user_id}}"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Reset PIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pin\": \"Nk6S6a6GA8TIk8pxDdnuF1nn0XlQzcxmilDhOy\\/bEZu7t5aw4MO9Vm4+aDxnmoMkUylyfXbHiDP+AF3aDIJ1pzGlL0X9HGhZNqDcoGrfdXdRj+t6WUs+w7ECfi\\/wO\\/\\/i0eo4WBYlwI3\\/X+sSsrFUvh7SJZCn0F2iGWZ+KVl5UH12I6WgN7iHHAGVZgIMflq1WZ+yAd1BGqkd8FrQBE3UfESTWLeoY4jvAcuQZTsDJlIqY5mI7lHBNQ7klOYkC\\/QgkrFLBCAJKeO38dCviGKtkx9FFbvUUOgzpRxH30hs1NCyPQhK0xFTU0KXfmgJMxYy3NZePKYI1As9Jmn279W2rw==\",\r\n    \"token\": \"123456\",\r\n    \"nodeId\": \"{{node_id}}\",\r\n    \"subnetId\": \"{{subnet_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/cards/reset-pin",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"cards",
								"reset-pin"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "ATM withdraw",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"authentication\": {\n    \"account_number\": \"{{card_number}}\",\n    \"accountholder_billing_address\": \"\",\n    \"accountholder_billing_zipcode\": \"12343\",\n    \"cvv\": \"\",\n    \"expiration_date\": \"{{reu_exp_date}}\",\n    \"merchant_security_code\": \"12345\",\n    \"authorization_code\": \"123456\",\n    \"pin\": \"1234\"\n  },\n  \"amount\": {\n    \"debit\": true,\n    \"transaction_currency\": \"USD\",\n    \"transaction_value\": 100,\n    \"settlement_currency\": \"USD\",\n    \"settlement_currency_conversion_rate\": \"1\",\n    \"settlement_value\": 100\n  },\n  \"meta\": {\n    \"card_acceptor\": {\n      \"acquirer_id\": \"3387343662\",\n      \"mcc\": \"6011\",\n      \"address\": {\n        \"street\": \"#601 MISSION ST\",\n        \"city\": \"SAN FRANCISCO\",\n        \"state\": \"CA\",\n        \"country\": \"US\"\n      },\n      \"name\": \"Bank of America\",\n      \"terminal_id\": \"100\",\n      \"merchant_number\": \"123456\"\n    },\n    \"is_force_post\": false,\n    \"is_recurring\": true,\n    \"merchant_name\": \"Bank of America\",\n    \"partial_approval_allowed\": false,\n    \"point_of_service\": {\n      \"condition_code\": \"\",\n      \"pan_entry_mode\": \"INTEGRATED_CIRCUIT_CARD\",\n      \"pin_entry_mode\": \"PIN_ENTRY_CAPABILITY\",\n      \"presentment\": {\n        \"card_presence\": \"CARD_PRESENT\",\n        \"cardholder_presence\": \"CUSTOMER_PRESENT\",\n        \"security_concern\": \"IDENTIFICATION_VERIFIED\",\n        \"type\": \"ORIGINAL_PRESENTMENT\"\n      },\n      \"terminal\": {\n        \"attendance\": \"UNATTENDED\",\n        \"card_input_capability\": \"MAG_STRIPE_AND_EMV\",\n        \"card_retention_capability\": \"DEVICE_CANNOT_RETAIN_CARD\",\n        \"location\": \"OFF_PREMISE\",\n        \"operator\": \"CUSTOMER_OPERATED\",\n        \"type\": \"ATM\"\n      }\n    },\n    \"type\": \"CASH\"\n  }\n}"
						},
						"url": {
							"raw": "https://uat-terminal.synapsefi.com/v1/transactions",
							"protocol": "https",
							"host": [
								"uat-terminal",
								"synapsefi",
								"com"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Pay at MOBIL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"authentication\": {\n    \"account_number\": \"{{card_number}}\",\n    \"accountholder_billing_address\": \"\",\n    \"accountholder_billing_zipcode\": \"12343\",\n    \"cvv\": \"\",\n    \"expiration_date\": \"{{reu_exp_date}}\",\n    \"merchant_security_code\": \"12345\",\n    \"authorization_code\": \"123456\",\n    \"pin\": \"1234\"\n  },\n  \"amount\": {\n    \"debit\": true,\n    \"transaction_currency\": \"USD\",\n    \"transaction_value\": 1,\n    \"settlement_currency\": \"USD\",\n    \"settlement_currency_conversion_rate\": \"1\",\n    \"settlement_value\": 1\n  },\n  \"meta\": {\n    \"card_acceptor\": {\n      \"acquirer_id\": \"1462338266\",\n      \"mcc\": \"5542\",\n      \"address\": {\n        \"street\": \"CHIP ISTP TESTING\",\n        \"city\": \"Brussels\",\n        \"state\": \"  \",\n        \"country\": \"US\"\n      },\n      \"name\": \"MOBIL\",\n      \"terminal_id\": \"100\",\n      \"merchant_number\": \"123456\"\n    },\n    \"is_force_post\": false,\n    \"is_recurring\": true,\n    \"lifecycle\": {\n      \"interval\": \"DAYS\",\n      \"value\": 2\n    },\n    \"merchant_name\": \"MOBIL\",\n    \"partial_approval_allowed\": false,\n    \"point_of_service\": {\n      \"condition_code\": \"\",\n      \"pan_entry_mode\": \"INTEGRATED_CIRCUIT_CARD\",\n      \"pin_entry_mode\": \"PIN_ENTRY_CAPABILITY\",\n      \"presentment\": {\n        \"card_presence\": \"CARD_PRESENT\",\n        \"cardholder_presence\": \"CUSTOMER_PRESENT\",\n        \"security_concern\": \"NO_SECURITY_CONCERN\",\n        \"type\": \"ORIGINAL_PRESENTMENT\"\n      },\n      \"terminal\": {\n        \"attendance\": \"UNATTENDED\",\n        \"card_input_capability\": \"MAG_STRIPE_AND_EMV\",\n        \"card_retention_capability\": \"DEVICE_CANNOT_RETAIN_CARD\",\n        \"location\": \"ON_PREMISE\",\n        \"operator\": \"CUSTOMER_OPERATED\",\n        \"type\": \"POS_TERMINAL\"\n      }\n    },\n    \"type\": \"PURCHASE\"\n  }\n}"
						},
						"url": {
							"raw": "https://uat-terminal.synapsefi.com/v1/transactions",
							"protocol": "https",
							"host": [
								"uat-terminal",
								"synapsefi",
								"com"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Pre Auth Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"synapse_transaction_id\", jsonData.synapse_transaction_id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authentication\": {\n        \"account_number\": \"{{card_number}}\",\n        \"accountholder_billing_address\": \"\",\n        \"accountholder_billing_zipcode\": \"44343\",\n        \"cvv\": \"\",\n        \"expiration_date\": \"{{reu_exp_date}}\",\n        \"merchant_security_code\": \"12345\",\n        \"authorization_code\": \"123456\"\n    },\n    \"amount\": {\n        \"debit\": true,\n        \"transaction_currency\": \"USD\",\n        \"transaction_value\": 300,\n        \"settlement_currency\": \"USD\",\n        \"settlement_currency_conversion_rate\": \"1\",\n        \"settlement_value\": 300\n    },\n    \"meta\": {\n        \"card_acceptor\": {\n            \"acquirer_id\": \"2216372068\",\n            \"address\": {\n                \"street\": \"\",\n                \"city\": \"\",\n                \"state\": \"\",\n                \"country\": \"US\"\n            },\n            \"merchant_number\": \"123456\",\n            \"mcc\": \"5812\",\n            \"name\": \"In-N-Out\",\n            \"terminal_id\": \"100\"\n        },\n        \"is_force_post\": false,\n        \"is_recurring\": false,\n        \"lifecycle\": {\n            \"interval\": \"DAYS\",\n            \"value\": 7\n        },\n        \"merchant_name\": \"In-N-Out\",\n        \"partial_approval_allowed\": false,\n        \"point_of_service\": {\n            \"condition_code\": \"\",\n            \"pan_entry_mode\": \"MAGNETIC_STRIPE_CONTACTLESS\",\n            \"pin_entry_mode\": \"UNSPECIFIED\",\n            \"presentment\": {\n                \"card_presence\": \"CARD_NOT_PRESENT\",\n                \"cardholder_presence\": \"CUSTOMER_PRESENT\",\n                \"security_concern\": \"CHANNEL_ENCRYPTED_ELECTRONIC_TRANSACTION\",\n                \"type\": \"FIRST_REPRESENTMENT\"\n            },\n            \"terminal\": {\n                \"attendance\": \"ATTENDED\",\n                \"card_input_capability\": \"MANUAL\",\n                \"card_retention_capability\": \"DEVICE_CAN_RETAIN_CARD\",\n                \"location\": \"OFF_PREMISE\",\n                \"operator\": \"CARD_ACCEPTOR_OPERATED\",\n                \"type\": \"ADMINISTRATIVE_TERMINAL\"\n            }\n        },\n        \"type\": \"PURCHASE\"\n    }\n}"
						},
						"url": {
							"raw": "https://uat-terminal.synapsefi.com/v1/transactions",
							"protocol": "https",
							"host": [
								"uat-terminal",
								"synapsefi",
								"com"
							],
							"path": [
								"v1",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Add Tip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": {\n        \"transaction_currency\": \"USD\",\n        \"transaction_value\": 500\n    }\n}"
						},
						"url": {
							"raw": "https://uat-terminal.synapsefi.com/v1/transactions/{{synapse_transaction_id}}",
							"protocol": "https",
							"host": [
								"uat-terminal",
								"synapsefi",
								"com"
							],
							"path": [
								"v1",
								"transactions",
								"{{synapse_transaction_id}}"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get_Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData[0].nodeId)\r",
									"pm.environment.set(\"external_account_id\", jsonData[0].nodeId);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 20000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Send Money to Linked ACH",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 2.00,\n    \"note\": \"Transfer to Wolfgang Amadius A.F\",\n    \"toNodeType\": \"ACH-US\",\n    \"currency\": \"USD\",\n    \"fromNodeType\": \"DEPOSIT-US\",\n    \"fromNodeId\": \"-ta-\",\n    \"toNodeId\": \"{{external_account_id}}\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "List of Nodes By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData[1].nodeId)\r",
									"pm.environment.set(\"external_account_id\", jsonData[1].nodeId);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Money to Linked Bank login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 3.329999999999998,\n    \"note\": \"Transfer to Wolfgang Amadius A.F\",\n    \"toNodeType\": \"ACH-US\",\n    \"currency\": \"USD\",\n    \"fromNodeType\": \"DEPOSIT-US\",\n    \"fromNodeId\": \"-ta-\",\n    \"toNodeId\": \"{{external_account_id}}\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get user transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				}
			]
		},
		{
			"name": "Portfolio Reallocation",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4&current_app_version=0.1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								},
								{
									"key": "current_app_version",
									"value": "0.1"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Update Investor Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(202);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"email\": \"vikum.aeturnum+200@gmail.com\",\n    \"addressPostalCode\": \"94105\",\n    \"mailingAddress\": {\n        \"addressCountryCode\": \"US\",\n        \"addressCity\": \"San Francisco\",\n        \"addressSubdivision\": \"CA\",\n        \"addressStreet\": \"1 Market Street Suite 1000\",\n        \"addressPostalCode\": \"94105\"\n    },\n    \"addressSubdivision\": \"CA\",\n    \"addressCity\": \"San Francisco\",\n    \"investmentRequest\": {\n        \"investmentProfile\": {\n            \"riskTolerance\": \"MEDIUM\",\n            \"investmentExperience\": \"NONE\",\n            \"federalTaxBracketPercent\": 22,\n            \"investmentObjective\": \"CAPITAL_PRESERVATION\"\n        },\n        \"onboardingQuestionAnswers\": [\n            {\n                \"response\": [\n                    {\n                        \"description\": \"I'm new to the world of investing and have a limited understanding of markets.\",\n                        \"additionalDetails\": [],\n                        \"selected\": true,\n                        \"identifier\": \"A\",\n                        \"key\": \"Novice\",\n                        \"value\": \"Novice\"\n                    }\n                ],\n                \"questionId\": \"806d8617-9d15-442d-bb31-6f9f03549d5a\"\n            },\n            {\n                \"response\": [\n                    {\n                        \"additionalDetails\": [],\n                        \"description\": \"I'm okay with taking some risk. I can accept modest losses for the possibility of modest gains.\",\n                        \"identifier\": \"2\",\n                        \"value\": \"Moderately\",\n                        \"key\": \"Moderately\",\n                        \"selected\": true\n                    }\n                ],\n                \"questionId\": \"547c6bf1-8892-42ed-b459-c5016e127ee8\"\n            },\n            {\n                \"questionId\": \"de88645d-7091-4cdb-a214-ae4dc00c7a79\",\n                \"response\": [\n                    {\n                        \"additionalDetails\": [],\n                        \"value\": \"STUDENT\",\n                        \"key\": \"STUDENT\",\n                        \"description\": \"Student\",\n                        \"selected\": true,\n                        \"identifier\": \"4\"\n                    }\n                ]\n            },\n            {\n                \"response\": [\n                    {\n                        \"key\": \"1\",\n                        \"identifier\": \"1\",\n                        \"description\": \"Less than $25k\",\n                        \"value\": \"min: 0, max: 25000\",\n                        \"additionalDetails\": [],\n                        \"selected\": true\n                    }\n                ],\n                \"questionId\": \"baa418af-97bd-4025-99a0-2aca5efb323c\"\n            },\n            {\n                \"questionId\": \"bfd6266d-0c77-41d0-9ccb-f5a4bcd654be\",\n                \"response\": [\n                    {\n                        \"value\": \"min: 50001, max: 100000\",\n                        \"additionalDetails\": [],\n                        \"identifier\": \"2\",\n                        \"key\": \"2\",\n                        \"description\": \"$50k - $100k\",\n                        \"selected\": true\n                    }\n                ]\n            }\n        ],\n        \"suitabilityProfile\": {\n            \"timeHorizon\": \"SHORT\",\n            \"liquidityNeeds\": \"VERY_IMPORTANT\"\n        }\n    },\n    \"lastName\": \"Smith\",\n    \"addressCountryCode\": \"US\",\n    \"gender\": \"MALE\",\n    \"addressStreet\": \"1 Market Street Suite 1000\",\n    \"phoneNumber\": \"+911761719908\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Update Investor Profile for subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"John\",\n    \"phoneNumber\": \"+911761719908\",\n    \"addressStreet\": \"1 Market Street Suite 1000\",\n    \"lastName\": \"Smith\",\n    \"addressPostalCode\": \"94105\",\n    \"addressCity\": \"San Francisco\",\n    \"token\": \"123456\",\n    \"gender\": \"MALE\",\n    \"email\": \"vikum.aeturnum+200@gmail.com\",\n    \"mailingAddress\": {\n        \"addressCity\": \"San Francisco\",\n        \"addressStreet\": \"1 Market Street Suite 1000\",\n        \"addressSubdivision\": \"CA\",\n        \"addressCountryCode\": \"US\",\n        \"addressPostalCode\": \"94105\"\n    },\n    \"addressCountryCode\": \"US\",\n    \"addressSubdivision\": \"CA\",\n    \"investmentRequest\": {\n        \"investmentProfile\": {\n            \"riskTolerance\": \"MEDIUM\",\n            \"federalTaxBracketPercent\": 22,\n            \"investmentObjective\": \"CAPITAL_PRESERVATION\",\n            \"investmentExperience\": \"NONE\"\n        },\n        \"onboardingQuestionAnswers\": [\n            {\n                \"response\": [\n                    {\n                        \"identifier\": \"A\",\n                        \"selected\": true,\n                        \"description\": \"I'm new to the world of investing and have a limited understanding of markets.\",\n                        \"value\": \"Novice\",\n                        \"key\": \"Novice\",\n                        \"additionalDetails\": []\n                    }\n                ],\n                \"questionId\": \"806d8617-9d15-442d-bb31-6f9f03549d5a\"\n            },\n            {\n                \"response\": [\n                    {\n                        \"value\": \"Moderately\",\n                        \"description\": \"I'm okay with taking some risk. I can accept modest losses for the possibility of modest gains.\",\n                        \"key\": \"Moderately\",\n                        \"identifier\": \"2\",\n                        \"selected\": true,\n                        \"additionalDetails\": []\n                    }\n                ],\n                \"questionId\": \"547c6bf1-8892-42ed-b459-c5016e127ee8\"\n            },\n            {\n                \"questionId\": \"de88645d-7091-4cdb-a214-ae4dc00c7a79\",\n                \"response\": [\n                    {\n                        \"description\": \"Student\",\n                        \"selected\": true,\n                        \"additionalDetails\": [],\n                        \"value\": \"STUDENT\",\n                        \"identifier\": \"4\",\n                        \"key\": \"STUDENT\"\n                    }\n                ]\n            },\n            {\n                \"questionId\": \"baa418af-97bd-4025-99a0-2aca5efb323c\",\n                \"response\": [\n                    {\n                        \"description\": \"Less than $25k\",\n                        \"value\": \"min: 0, max: 25000\",\n                        \"additionalDetails\": [],\n                        \"identifier\": \"1\",\n                        \"selected\": true,\n                        \"key\": \"1\"\n                    }\n                ]\n            },\n            {\n                \"response\": [\n                    {\n                        \"description\": \"$50k - $100k\",\n                        \"additionalDetails\": [],\n                        \"key\": \"2\",\n                        \"value\": \"min: 50001, max: 100000\",\n                        \"identifier\": \"2\",\n                        \"selected\": true\n                    }\n                ],\n                \"questionId\": \"bfd6266d-0c77-41d0-9ccb-f5a4bcd654be\"\n            }\n        ],\n        \"suitabilityProfile\": {\n            \"liquidityNeeds\": \"VERY_IMPORTANT\",\n            \"timeHorizon\": \"SHORT\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get User Subscription Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"subscriptionTypeId\", jsonData.content[0].id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/subscriptions/types",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"subscriptions",
								"types"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get User Subscription Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/subscriptions/details/{{subscriptionTypeId}}",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"subscriptions",
								"details",
								"{{subscriptionTypeId}}"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Actual Portfolio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/portfolio/portfolio/actual",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"portfolio",
								"portfolio",
								"actual"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Historical-returns-new(7Days)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/portfolio/portfolio/historical-returns-new?dateTimeZone=Asia/Colombo&endDate=1623518577000&startDate=1620840177000",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"portfolio",
								"portfolio",
								"historical-returns-new"
							],
							"query": [
								{
									"key": "dateTimeZone",
									"value": "Asia/Colombo"
								},
								{
									"key": "endDate",
									"value": "1623518577000"
								},
								{
									"key": "startDate",
									"value": "1620840177000"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Historical-returns-new(YTD)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/portfolio/portfolio/historical-returns-new?dateTimeZone=Asia/Colombo&endDate=1615884224814&startDate=1609490580000",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"portfolio",
								"portfolio",
								"historical-returns-new"
							],
							"query": [
								{
									"key": "dateTimeZone",
									"value": "Asia/Colombo"
								},
								{
									"key": "endDate",
									"value": "1615884224814"
								},
								{
									"key": "startDate",
									"value": "1609490580000"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Portfolio Reallocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"investmentChoices\": [\n        {\n            \"etfId\": \"4c69f9b3-f2af-49a1-b582-48c554445427\",\n            \"investedPercent\": 20\n        },\n        {\n            \"etfId\": \"f81bb093-b826-4274-91bb-85ed51ef0309\",\n            \"investedPercent\": 20\n        },\n        {\n            \"investedPercent\": 60,\n            \"etfId\": \"2989b062-2463-4349-b18f-2e93e8cb1071\"\n        }\n    ],\n    \"sustainable\": true,\n    \"adjustable\": true,\n    \"custom\": false,\n    \"portfolioName\": \"Growth\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/subscriptions/upgrade",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"subscriptions",
								"upgrade"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				}
			]
		},
		{
			"name": "Market Price Change",
			"item": []
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4&current_app_version=0.1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								},
								{
									"key": "current_app_version",
									"value": "0.1"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Get My Devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/devices",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"devices"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"Test@123\",\n    \"confirmPassword\": \"Test@123\",\n    \"token\": \"123456\",\n    \"oldPassword\": \"Test@123\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/reset-password",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"reset-password"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get User Transaction History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/transactions?",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"transactions"
							],
							"query": [
								{
									"key": "transactionTypes",
									"value": "{{transcationTypes}}",
									"disabled": true
								},
								{
									"key": "transactionStatuses",
									"value": "{{transactionStatuses}}",
									"disabled": true
								},
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tax Statements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/reports/statements",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"reports",
								"statements"
							],
							"query": [
								{
									"key": "transactionTypes",
									"value": "{{transcationTypes}}",
									"disabled": true
								},
								{
									"key": "transactionStatuses",
									"value": "{{transactionStatuses}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Teardown",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4&current_app_version=0.1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								},
								{
									"key": "current_app_version",
									"value": "0.1"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "List of Nodes By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"let jsonData = pm.response.json();\r",
									"var ach_nodes = [];\r",
									"var interchange_nodes = [];\r",
									"var node_count = jsonData.length;\r",
									"/*node_count which current user has */\r",
									"console.log(\"node count to be deleted : \"+node_count-1);\r",
									"\r",
									"/*\r",
									"Seperate nodes by interchange and ach, assign them to environment variables to use in remove node RQs\r",
									"*/\r",
									"for(var i = 0; i < node_count; i++) {\r",
									"console.log(\"Card Type : \"+jsonData[i].type+\" Node ID : \"+jsonData[i].nodeId);\r",
									"\r",
									"if(jsonData[i].type === \"ACH-US\"){\r",
									"ach_nodes.push(jsonData[i].nodeId)\r",
									"}\r",
									"else if(jsonData[i].type === \"INTERCHANGE-US\"){\r",
									"interchange_nodes.push(jsonData[i].nodeId)\r",
									"}\r",
									"}\r",
									"console.log(\"ACH Nodes Array for Reset User : \"+ach_nodes);\r",
									"console.log(\"Interchange Nodes Array for Reset User : \"+interchange_nodes);\r",
									"postman.setEnvironmentVariable(\"deleted-ach-nodes\", ach_nodes);\r",
									"postman.setEnvironmentVariable(\"deleted-interchange-nodes\", interchange_nodes);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Interchange Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									" if(pm.environment.get(\"counter-interchange\")<pm.environment.get(\"deleted-interchange-length\")){\r",
									"     postman.setNextRequest(pm.info.requestName);\r",
									" }\r",
									" else{\r",
									"     pm.environment.set(\"counter-interchange\",0);\r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									"\r",
									"let interchange_node = [];\r",
									"interchange_node = pm.environment.get(\"deleted-interchange-nodes\");\r",
									"var idsArr = interchange_node.split(',');\r",
									"var length = idsArr.length;\r",
									"console.log(length);\r",
									"console.log(idsArr[0]);\r",
									"if(length === 0){\r",
									"postman.setNextRequest(\"Remove ACH Nodes\");\r",
									"}\r",
									"/* \r",
									"length : No of ACH Nodes to be deleted\r",
									"counter: use to navigate through nodes to be deleted\r",
									"*/\r",
									"postman.setEnvironmentVariable(\"deleted-interchange-length\", length);\r",
									"let counter = pm.environment.get(\"counter-interchange\");\r",
									"/* set each node to deleted-ach-node to be deleted this iteration */\r",
									"postman.setEnvironmentVariable(\"deleted-interchange-node\",idsArr[counter] );\r",
									"pm.environment.set(\"counter-interchange\",++counter);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/node/interchange/{{deleted-interchange-node}}",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"node",
								"interchange",
								"{{deleted-interchange-node}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove ACH Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									" if(pm.environment.get(\"counter-ach\")<pm.environment.get(\"deleted-ach-length\")){\r",
									"     postman.setNextRequest(pm.info.requestName)\r",
									" }\r",
									" else{\r",
									"     pm.environment.set(\"counter-ach\",0);\r",
									" }\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									"\r",
									"let ach_node = [];\r",
									"ach_node = pm.environment.get(\"deleted-ach-nodes\");\r",
									"var idsArr = ach_node.split(',');\r",
									"var length = idsArr.length;\r",
									"if(length === 0){\r",
									"postman.setNextRequest(\"List of Nodes\");\r",
									"}\r",
									"/* \r",
									"length : No of ACH Nodes to be deleted\r",
									"counter: use to navigate through nodes to be deleted\r",
									"*/\r",
									"postman.setEnvironmentVariable(\"deleted-ach-length\", length);\r",
									"let counter = pm.environment.get(\"counter-ach\");\r",
									"/* set each node to deleted-ach-node to be deleted this iteration */\r",
									"postman.setEnvironmentVariable(\"deleted-ach-node\",idsArr[counter] );\r",
									"pm.environment.set(\"counter-ach\",++counter);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/node/ach/{{deleted-ach-node}}",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"node",
								"ach",
								"{{deleted-ach-node}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Verification",
			"item": [
				{
					"name": "Login Reusable Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4&current_app_version=0.1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								},
								{
									"key": "current_app_version",
									"value": "0.1"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "List of Nodes By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"let jsonData = pm.response.json();\r",
									"var ach_nodes = [];\r",
									"var interchange_nodes = [];\r",
									"var node_count = jsonData.length;\r",
									"/*node_count which current user has */\r",
									"console.log(\"User Verification : node count to be deleted : \"+node_count);\r",
									"\r",
									"/*\r",
									"Seperate nodes by interchange and ach, assign them to environment variables to use in remove node RQs\r",
									"*/\r",
									"for(var i = 0; i < node_count; i++) {\r",
									"console.log(\"Card Type : \"+jsonData[i].type+\" Node ID : \"+jsonData[i].nodeId);\r",
									"\r",
									"if(jsonData[i].type === \"ACH-US\"){\r",
									"console.log(\"User Verification : ACH bank Account Detected\");\r",
									"}\r",
									"else if(jsonData[i].type === \"INTERCHANGE-US\"){\r",
									"console.log(\"User Verification : interchange bank Account Detected\");\r",
									"}\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Direct Transactions",
			"item": [
				{
					"name": "Login_Reusable_User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								},
								{
									"key": "current_app_version",
									"value": "0.1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Get user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"subnet_id\", jsonData.cardDto._id);\r",
									"pm.environment.set(\"node_id\", jsonData.cardDto.node_id);\r",
									"\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/me/details?fullDehydrate=1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"me",
								"details"
							],
							"query": [
								{
									"key": "fullDehydrate",
									"value": "1"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "RefreshToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"if (jsonData.refresh_token){",
									"    postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);",
									"}",
									"",
									"if (jsonData.documents[0]){",
									"    postman.setEnvironmentVariable(\"document_id\", jsonData.documents[0].id);",
									"    ",
									"    if (jsonData.documents[0].physical_docs[0]) {",
									"        postman.setEnvironmentVariable(\"physical_doc_id\", jsonData.documents[0].physical_docs[0].id);",
									"    }",
									"    ",
									"    if (jsonData.documents[0].social_docs[0]) {",
									"        postman.setEnvironmentVariable(\"social_doc_id\", jsonData.documents[0].physical_docs[0].id);",
									"    }",
									"    ",
									"    if (jsonData.documents[0].virtual_docs[0]) {",
									"        postman.setEnvironmentVariable(\"virtual_doc_id\", jsonData.documents[0].virtual_docs[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-SP-GATEWAY",
								"value": "{{client_id}}|{{client_secret}}"
							},
							{
								"key": "X-SP-USER-IP",
								"value": "{{ip}}"
							},
							{
								"key": "X-SP-USER",
								"value": "|{{fp}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/v3.1/users/{{synapse_user_id}}?full_dehydrate=no",
							"host": [
								"{{host}}"
							],
							"path": [
								"v3.1",
								"users",
								"{{synapse_user_id}}"
							],
							"query": [
								{
									"key": "full_dehydrate",
									"value": "no"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "OAuth via refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"if (jsonData.oauth_key){",
									"    postman.setEnvironmentVariable(\"oauth_key\", jsonData.oauth_key);   ",
									"}",
									"if (jsonData.refresh_token){",
									"    postman.setEnvironmentVariable(\"refresh_token\", jsonData.refresh_token);   ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-SP-GATEWAY",
								"value": "{{client_id}}|{{client_secret}}"
							},
							{
								"key": "X-SP-USER-IP",
								"value": "{{ip}}"
							},
							{
								"key": "X-SP-USER",
								"value": "|{{fp}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\":\"{{refresh_token}}\",\n    \"scope\":[\n        \"USER|PATCH\",\n        \"USER|GET\",\n        \"NODES|POST\",\n        \"NODES|GET\",\n        \"NODE|GET\",\n        \"NODE|PATCH\",\n        \"NODE|DELETE\",\n        \"TRANS|POST\",\n        \"TRANS|GET\",\n        \"TRAN|GET\",\n        \"TRAN|PATCH\",\n        \"TRAN|DELETE\",\n        \"SUBNETS|GET\",\n        \"SUBNETS|POST\",\n        \"SUBNET|GET\",\n        \"SUBNET|PATCH\",\n        \"STATEMENTS|GET\",\n        \"STATEMENT|GET\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host}}/v3.1/oauth/{{synapse_user_id}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"v3.1",
								"oauth",
								"{{synapse_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Subnet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"if (jsonData._id){",
									"    postman.setEnvironmentVariable(\"subnet_id\", jsonData._id);   ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-SP-USER-IP",
								"value": "{{ip}}"
							},
							{
								"key": "X-SP-USER",
								"value": "{{oauth_key}}|{{fp}}"
							},
							{
								"key": "X-SP-IDEMPOTENCY-KEY",
								"value": "{{id_key}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nickname\":\"Janicee's Trio Card\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/v3.1/users/{{synapse_user_id}}/nodes/{{dda_node_id}}/subnets",
							"host": [
								"{{host}}"
							],
							"path": [
								"v3.1",
								"users",
								"{{synapse_user_id}}",
								"nodes",
								"{{dda_node_id}}",
								"subnets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Subnets",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-SP-USER-IP",
								"value": "{{ip}}"
							},
							{
								"key": "X-SP-USER",
								"value": "{{oauth_key}}|{{fp}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/v3.1/users/{{user_id}}/nodes/{{dda_node_id}}/subnets",
							"host": [
								"{{host}}"
							],
							"path": [
								"v3.1",
								"users",
								"{{user_id}}",
								"nodes",
								"{{dda_node_id}}",
								"subnets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Subnet",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-SP-USER-IP",
								"value": "{{ip}}"
							},
							{
								"key": "X-SP-USER",
								"value": "{{oauth_key}}|{{fp}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host}}/v3.1/users/{{user_id}}/nodes/{{dda_node_id}}/subnets/{{subnet_id}}?full_dehydrate=yes",
							"host": [
								"{{host}}"
							],
							"path": [
								"v3.1",
								"users",
								"{{user_id}}",
								"nodes",
								"{{dda_node_id}}",
								"subnets",
								"{{subnet_id}}"
							],
							"query": [
								{
									"key": "full_dehydrate",
									"value": "yes"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Direct Deposit -Dummy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"if (jsonData._id){",
									"    postman.setEnvironmentVariable(\"transaction_id\", jsonData._id);   ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-SP-USER-IP",
								"value": "{{ip}}"
							},
							{
								"key": "X-SP-USER",
								"value": "{{oauth_key}}|{{fp}}"
							},
							{
								"key": "X-SP-IDEMPOTENCY-KEY",
								"value": "{{id_key}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": \"ACH\",\r\n  \"direction\": \"DEPOSIT\",\r\n  \"amount\": 17.25,\r\n  \"currency\": \"USD\",\r\n  \"posting_label\": \"Dummy Direct Deposit Transaction\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/v3.1/users/{{user_id}}/nodes/{{dda_node_id}}/subnets/{{subnet_id}}//dummy-tran",
							"host": [
								"{{host}}"
							],
							"path": [
								"v3.1",
								"users",
								"{{user_id}}",
								"nodes",
								"{{dda_node_id}}",
								"subnets",
								"{{subnet_id}}",
								"",
								"dummy-tran"
							]
						}
					},
					"response": []
				},
				{
					"name": "Direct Debit -Dummy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"if (jsonData._id){",
									"    postman.setEnvironmentVariable(\"transaction_id\", jsonData._id);   ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-SP-USER-IP",
								"value": "{{ip}}"
							},
							{
								"key": "X-SP-USER",
								"value": "{{oauth_key}}|{{fp}}"
							},
							{
								"key": "X-SP-IDEMPOTENCY-KEY",
								"value": "{{id_key}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": \"ACH\",\r\n  \"direction\": \"WITHDRAWAL\",\r\n  \"amount\": 1.25,\r\n  \"currency\": \"USD\",\r\n  \"posting_label\": \"Dummy Test Transaction183\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/v3.1/users/{{user_id}}/nodes/{{dda_node_id}}/subnets/{{subnet_id}}//dummy-tran",
							"host": [
								"{{host}}"
							],
							"path": [
								"v3.1",
								"users",
								"{{user_id}}",
								"nodes",
								"{{dda_node_id}}",
								"subnets",
								"{{subnet_id}}",
								"",
								"dummy-tran"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Plaid Update Mode",
			"item": [
				{
					"name": "Login_Reusable_User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								},
								{
									"key": "current_app_version",
									"value": "0.1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Get user data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"subnet_id\", jsonData.cardDto._id);\r",
									"pm.environment.set(\"node_id\", jsonData.cardDto.node_id);\r",
									"\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/users/me/details?fullDehydrate=1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"users",
								"me",
								"details"
							],
							"query": [
								{
									"key": "fullDehydrate",
									"value": "1"
								}
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "List of Nodes By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData[0].nodeId)\r",
									"pm.environment.set(\"external_account_id\", jsonData[0].nodeId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Plaid_link_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"plaid_linkToken\", jsonData.linkToken);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientName\": \"Finch\",\n    \"linkCustomizationName\": \"uat_configs\",\n    \"user\": {\n        \"legalName\": \"Vikum Warnakula\",\n        \"clientUserId\": \"{{user_id}}\",\n        \"email\": \"{{user_email}}\"\n    },\n    \"redirectUri\": \"https:\\/\\/prod.trioappcore.com\\/app\\/plaid-link\",\n    \"countryCodes\": [\n        \"US\"\n    ],\n    \"language\": \"en\",\n    \"accountFilters\": {\n        \"depository\": {\n            \"accountSubtypes\": [\n                \"checking\",\n                \"savings\"\n            ]\n        }\n    },\n    \"products\": [\n        \"auth\",\n        \"transactions\"\n    ]\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking-node/link/link-token",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking-node",
								"link",
								"link-token"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "plaid_get_details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"external_account_id\", jsonData.nodeId);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"link_open_id\": \"59c025bb-1342-4772-8065-d0fcc75493ed\",\n    \"link_persistent_id\": \"cc8b4596-ab31-46fc-aa53-e673d0547358\",\n    \"link_version\": \"2.0.1124\",\n    \"link_token\": \"{{plaid_linkToken}}\",\n    \"initial_products\": null,\n    \"user\": {},\n    \"options\": {},\n    \"integration_mode\": 3,\n    \"link_sdk_version\": \"2.1.3\"\n}"
						},
						"url": {
							"raw": "https://sandbox.plaid.com/link/client/get",
							"protocol": "https",
							"host": [
								"sandbox",
								"plaid",
								"com"
							],
							"path": [
								"link",
								"client",
								"get"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "plaid_bankLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"plaid_public_token\", jsonData.public_token);\r",
									"pm.environment.set(\"plaid_account_id\", jsonData.accounts[0].account_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"link_token\": \"{{plaid_linkToken}}\",\n    \"credentials\": {\n        \"username\": \"user_good\",\n        \"password\": \"pass_good\"\n    },\n    \"flexible_input_responses\": null,\n    \"initial_products\": [\n        \"auth\",\n        \"transactions\"\n    ],\n    \"institution_id\": \"ins_3\",\n    \"link_open_id\": \"59c025bb-1342-4772-8065-d0fcc75493ed\",\n    \"link_persistent_id\": \"cc8b4596-ab31-46fc-aa53-e673d0547358\",\n    \"link_session_id\": \"cee6924e-f699-45a5-b16b-f82a57407c2e\",\n    \"display_language\": \"en\",\n    \"options\": {\n        \"link_configuration\": {\n            \"version\": \"1.0\",\n            \"userConfig\": {\n                \"env\": \"sandbox\",\n                \"isMobile\": true,\n                \"isWebview\": true,\n                \"isIosSdkInProcessWebview\": true,\n                \"linkSdkVersion\": \"2.1.3\",\n                \"token\": \"link-sandbox-ad8c6902-9557-45af-bc1e-53d108959b1e\",\n                \"product\": [\n                    \"auth\",\n                    \"transactions\"\n                ],\n                \"webhook\": \"https://uat.trioappcore.com/api/infrastructure-service/webhooks/public/plaid/event\",\n                \"countryCodes\": [\n                    \"US\"\n                ],\n                \"language\": \"en\",\n                \"clientName\": \"Finch\",\n                \"accountSubtypes\": {\n                    \"depository\": [\n                        \"checking\",\n                        \"savings\"\n                    ]\n                },\n                \"paymentToken\": null,\n                \"institutionId\": null,\n                \"isInitializedWithLinkToken\": true,\n                \"optionalProducts\": [],\n                \"microdepositsEnabledOverride\": true,\n                \"oauthRedirectUri\": \"https://prod.trioappcore.com/app/plaid-link\",\n                \"publicToken\": null,\n                \"apiVersion\": \"v2\",\n                \"customizations\": null\n            },\n            \"selectedInstitution\": {\n                \"accountLocked\": null,\n                \"accountSetup\": \"https://secure01a.chase.com/web/auth/enrollment#/enroll/onlineEnrollment/gettingStarted/index?LOB=RGBLogon\",\n                \"brandName\": \"Chase\",\n                \"brandSubheading\": null,\n                \"colors\": {\n                    \"dark\": \"#085095\",\n                    \"darker\": \"#002e71\",\n                    \"light\": \"#3a72c1\",\n                    \"primary\": \"#095aa6\"\n                },\n                \"fields\": [\n                    {\n                        \"label\": \"User ID\",\n                        \"name\": \"username\",\n                        \"type\": \"text\"\n                    },\n                    {\n                        \"label\": \"Password\",\n                        \"name\": \"password\",\n                        \"type\": \"password\"\n                    }\n                ],\n                \"forgottenPassword\": \"https://secure01a.chase.com/web/auth/#/logon/forgotLoginDetails/identifyCustomer?lang=en\",\n                \"healthStatus\": \"HEALTH_STATUS_GREEN\",\n                \"highlightReason\": \"\",\n                \"id\": \"chase\",\n                \"inputSpec\": \"fixed\",\n                \"legacyInstitutionCode\": null,\n                \"legacyInstitutionCodeOrType\": \"chase\",\n                \"legacyInstitutionType\": \"chase\",\n                \"logo\": \"iVBORw0KGgoAAAANSUhEUgAAAJgAAACYCAMAAAAvHNATAAAANlBMVEVHcEwOW6f///8IVqUPW6gQXKgRXKkPW6gTYKwPW6gbYqsxcbJ3ocza5vDs8/b0+Pmlwt1Vir96WNmQAAAACnRSTlMA////5HhLoCDGuAtrFAAABQNJREFUeNrt3H9vpCAQBuACIuC6wn7/L3vuXttb8UX5MdjJpVya3D9tngDiqDPz8dE67KiNcc4NgxDDsP7HGD3aj58cVhu3avAYnNE/wbOjSZredObauctCveGuWsAC1aet/6Ja7UTVcF1t1oiGYSxLVjdaO6sLjYZFT9OTIBuTpju2nCAdbmS2irTrOQ6iwxiaJ02LTqNtp9n07lJT7kjtNNtjGdUt3JfMMSvq5Uwvo3osMn+kZLXLaTDp9jyL7rJkBJGgGTKXeCw3teqKXH6VCTKZw/Pl/RM2y8KRnDNHcjk+t1YdTIZJUVycdsCX4rrlK2Fp2WBb11Hcnlu+FibvU/tq4nV8uaphXt5vrTJz4KqfMemTMtNyTny6GmBStsnwef99pLbA5JKSZdwDRnzH/j7qm2ByeSRkY9VBoaYgKWA+LTs9NNAFqUSQkmbG1t9PyFzNBguSDiZ9ItjQxRts42qHJWVj6QYLkhaWCtAOtpk5d5HAEjJTtJCxgQSWCNDG/CtyT6CB4QDNZV+RQEAEwzJ4ZdoJBazdYDBAm2zWzkcuOhgM0MD+t3kuQphHMns+YYlnRzoYDNDM6YS9Avy+MBig2bMJS7hoYUBmjifsK5DuDQNhkD2asLSLGuZ3MnMwYQcuahiYM5s+9NdA2l8G24WOOnWXVIfvcuhhcYDmEiv5HuBfA4vDIAtX8uXyJ7DHnXg88FoOyUAaw8REPjahLAwQg8yArSFL0b+/v5L8UYmA0aQD6RSs7zC7lVx3te8CU2dDgLW04A0FMWwKx2OO/qiNt1gnmLqdrUP0MWCMt1g32FJ2/Jv4sPg5mAwq3mRWsIDdp3iTaY4wHYVibGAmiizYwFx0o2QDe+5+wREmoliMD8xuQws+sHEb7vOB6e2DGx+Y4QtzPGHuF1YMG3jCBr4wwRMm+MJ+91gp7Pcc+29gv9FFKYxtoMg2tGb7MML28Y3vAy/bVwRsX6qwfQ3F9sUdk1edG9jA5+XwFmbi1+mKCWyMP0BkfO+7BGb3H98CB9gAvtRP890fjqUTbJn2H7m2eWPT7XjUfOLK+DLyPmMj/JAqSr6TkcHeM0OG/jU+2bDNBtHwY70iHxmwbe6FRekN6jETj+fH/RPY1uVwQsitrIAmK3XhBBZlhGicQnOSdtEBFmeq2FTSEbHsDBYnEpuDNK1wHczvknXtUWJbuG7GZnWcC7hN71HhKtiszrInzVY2XwML6jTf1J7kWHeBhdPcSZANOPvusH1as8lIacb5uZSwkJfSvLuVE8mSMJBsrfPS5svqTkthwOVyCw1IZBDmYQr4mFuaoRTBLR3PWGZqerKYhUAGYagK7qhmahT0MgSD1XljWcFUswzAoEuXlpg9AzRPCoNPgK6iKK8tQNvBYF3eeSXvKIhlMQzXC45VhZ+qJUCLYLhaUNeWyjYEaFsYdjUU8dbLtrC5wYVrzapDx3cYrmBsLRSf606Nd1irK1FoObfCoGsoa0YAa3mrArR/sADnq7SDCZYtDbDQuo5H12aF7AsG6xapWoSoCtknDNagVrnw+7zyYOMF87DdRXXvHtgep1D2Kn65IVdLtyN0cRbO2WvLT8Dl2vpD6TbZkuw/09zsCyynmkrec8IxEHT6svDqzH8zDK9GmrZt1Y3RUj1U6Do+Mm0lx7j5Ht92hYwbPDJuicm4iSjjtqucG9Vybu37vagMmyG/z12X9tF/APITr9CCbDsMAAAAAElFTkSuQmCC\",\n                \"mfaCodeType\": \"numeric\",\n                \"name\": \"Chase\",\n                \"nameBreak\": null,\n                \"oauth\": false,\n                \"oauthLoginUrl\": null,\n                \"isNoResponseFlexInput\": false,\n                \"products\": {\n                    \"auth\": true,\n                    \"connect\": true,\n                    \"income\": true,\n                    \"info\": true,\n                    \"account_verify\": true,\n                    \"assets\": true,\n                    \"bank_transfer\": false,\n                    \"ddta\": false,\n                    \"deposit_switch\": false,\n                    \"holdings\": false,\n                    \"income_verification\": false,\n                    \"investments_auth\": false,\n                    \"investments\": true,\n                    \"liabilities\": true,\n                    \"payment_initiation\": false,\n                    \"sba_verification\": false,\n                    \"liabilities_report\": false\n                },\n                \"type\": \"chase\",\n                \"url\": \"https://www.chase.com\",\n                \"countryCodes\": [\n                    \"US\"\n                ],\n                \"mobileAuth\": false,\n                \"filterType\": \"FILTER_TYPE_NULL\"\n            },\n            \"isCustomInitializer\": false,\n            \"isPatch\": false\n        },\n        \"webhook\": \"https://uat.trioappcore.com/api/infrastructure-service/webhooks/public/plaid/event\",\n        \"use_public_token_nonce\": false\n    },\n    \"payment_token\": null,\n    \"integration_mode\": 3,\n    \"link_sdk_version\": \"2.1.3\"\n}"
						},
						"url": {
							"raw": "https://sandbox.plaid.com/link/item/create",
							"protocol": "https",
							"host": [
								"sandbox",
								"plaid",
								"com"
							],
							"path": [
								"link",
								"item",
								"create"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Plaid_linkAccount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publicToken\": \"{{plaid_public_token}}\",\n    \"accountName\": \"Plaid Saving\",\n    \"institutionId\": \"ins_3\",\n    \"plaidAccountIds\": [\n        \"{{plaid_account_id}}\"\n    ],\n    \"accountMask\": \"1111\"\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking-node/link/access-token",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking-node",
								"link",
								"access-token"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				},
				{
					"name": "Get_Nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"console.log(jsonData[0].nodeId)\r",
									"pm.environment.set(\"external_account_id\", jsonData[0].nodeId);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Linked Account Checking\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{access_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/nodes",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"nodes"
							]
						},
						"description": "toNodeType Accepted Values: [ACH-US, CARD-US, INTERCHANGE-US].\n\n*targetNodeType is always the nodetype of the external node (irrespective of whether it is from or to node).\n**fromNodeId is basically the Trio Account. So the input for specifying the same is \"-ta-\"."
					},
					"response": []
				}
			]
		},
		{
			"name": "Rebalancer Logics",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"access_token\", jsonData.access_token);\r",
									"pm.environment.set(\"user_id\", jsonData.user_id);\r",
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text",
									"disabled": true
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/uaa/oauth/token?device_uuid={{device_uuid}}&apns_token=2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4&current_app_version=0.1",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"uaa",
								"oauth",
								"token"
							],
							"query": [
								{
									"key": "device_uuid",
									"value": "{{device_uuid}}"
								},
								{
									"key": "apns_token",
									"value": "2c1346f213b30d111848f7614aee400d8267a1417152f8a81c509f77287470a4"
								},
								{
									"key": "current_app_version",
									"value": "0.1"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "real-time balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Deposit Flows | ACH-Bank Login\")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Test@123",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{reusable-username}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host-api-gateway}}/customer-service/banking/trio-account/realtime-balance",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"customer-service",
								"banking",
								"trio-account",
								"realtime-balance"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Swagger Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"trioauth_token\", jsonData.access_token);\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Rebalancer \")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text",
									"disabled": true
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://uat.trioappcore.com/api/uaa/oauth/token",
							"protocol": "https",
							"host": [
								"uat",
								"trioappcore",
								"com"
							],
							"path": [
								"api",
								"uaa",
								"oauth",
								"token"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Process Spends",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{trioauth_token}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "body",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  \"string\"\r\n]"
						},
						"url": {
							"raw": "https://uat.trioappcore.com/api/infrastructure-service/test/admin/rebalance/process-spends",
							"protocol": "https",
							"host": [
								"uat",
								"trioappcore",
								"com"
							],
							"path": [
								"api",
								"infrastructure-service",
								"test",
								"admin",
								"rebalance",
								"process-spends"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Process Spends Queue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{trioauth_token}}",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "body",
									"type": "string"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  \"string\"\r\n]"
						},
						"url": {
							"raw": "https://uat.trioappcore.com/api/infrastructure-service/test/admin/rebalance/process-spends-queue",
							"protocol": "https",
							"host": [
								"uat",
								"trioappcore",
								"com"
							],
							"path": [
								"api",
								"infrastructure-service",
								"test",
								"admin",
								"rebalance",
								"process-spends-queue"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				}
			],
			"description": "Deposit\r\nSpend\r\nPortfolio reallocation\r\nMarket price changes"
		},
		{
			"name": "business metrics data and fund flow",
			"item": [
				{
					"name": "Swagger Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.environment.set(\"trioauth_token\", jsonData.access_token);\r",
									"\r",
									"tests[\"verify the status code\"]=responseCode.code===200;\r",
									"\r",
									"setTimeout(function(){}, 2000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Pre-request Script ----- Rebalancer \")\r",
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "my-trusted-client",
									"type": "text",
									"disabled": true
								},
								{
									"key": "client_secret",
									"value": "12345",
									"type": "text",
									"disabled": true
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "12345",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://uat.trioappcore.com/api/uaa/oauth/token",
							"protocol": "https",
							"host": [
								"uat",
								"trioappcore",
								"com"
							],
							"path": [
								"api",
								"uaa",
								"oauth",
								"token"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Total Number of Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{trioauth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"createdDateStart\": \"2021-01-13\",\r\n\"createdDateEnd\": \"2021-05-14\",\r\n\"isKycCheckResultAvailable\": false\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/management-service/users/count",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"management-service",
								"users",
								"count"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Users submitted the address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{trioauth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/management-service/users/count/address-submitted?created-date-start=2021-01-13&created-date-end=2021-05-14",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"management-service",
								"users",
								"count",
								"address-submitted"
							],
							"query": [
								{
									"key": "created-date-start",
									"value": "2021-01-13"
								},
								{
									"key": "created-date-end",
									"value": "2021-05-14"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Get User growth details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{trioauth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/management-service/users/growth?start-date=2021-04-8&end-date=2021-04-09",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"management-service",
								"users",
								"growth"
							],
							"query": [
								{
									"key": "start-date",
									"value": "2021-04-8"
								},
								{
									"key": "end-date",
									"value": "2021-04-09"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "dda balance misalign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{trioauth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/management-service/users/growth?start-date=2021-04-8&end-date=2021-04-09",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"management-service",
								"users",
								"growth"
							],
							"query": [
								{
									"key": "start-date",
									"value": "2021-04-8"
								},
								{
									"key": "end-date",
									"value": "2021-04-09"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "Users who has completed all questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{trioauth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/management-service/users/count/question-completed?created-date-start=2021-01-13&created-date-end=2021-05-14&question-id=bfd6266d-0c77-41d0-9ccb-f5a4bcd654be",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"management-service",
								"users",
								"count",
								"question-completed"
							],
							"query": [
								{
									"key": "created-date-start",
									"value": "2021-01-13"
								},
								{
									"key": "created-date-end",
									"value": "2021-05-14"
								},
								{
									"key": "question-id",
									"value": "bfd6266d-0c77-41d0-9ccb-f5a4bcd654be"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "dda-available with given",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{trioauth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-api-gateway}}/management-service/users/count/dda-available/10003?created-date-start=2021-01-13&created-date-end=2021-05-14",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"management-service",
								"users",
								"count",
								"dda-available",
								"10003"
							],
							"query": [
								{
									"key": "created-date-start",
									"value": "2021-01-13"
								},
								{
									"key": "created-date-end",
									"value": "2021-05-14"
								}
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "paginated users list for given searching criteria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{trioauth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"createdDateStart\": \"2021-01-13\",\r\n\"createdDateEnd\": \"2021-05-14\",\r\n\"isKycCheckResultAvailable\": true,\r\n\"page\": {\r\n\"pageNumber\": 1,\r\n\"pageSize\": 10\r\n}\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/management-service/users/search",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"management-service",
								"users",
								"search"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "SSN-Users submitted the address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{trioauth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"createdDateStart\": \"2021-01-13\",\r\n    \"createdDateEnd\": \"2021-06-15\",\r\n    \"page\": {\r\n        \"pageNumber\": 7,\r\n        \"pageSize\": 100\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/management-service/users/search/SSN-complete",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"management-service",
								"users",
								"search",
								"SSN-complete"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				},
				{
					"name": "onfido complete users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"verify the status code\"]=responseCode.code===200;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"++++++++++\"+pm.info.requestName+\"++++++++++\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{trioauth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"createdDateStart\": \"2021-01-13\",\r\n\"createdDateEnd\": \"2021-05-14\",\r\n\"isKycCheckResultAvailable\": true,\r\n\"page\": {\r\n\"pageNumber\": 1,\r\n\"pageSize\": 10\r\n}\r\n}"
						},
						"url": {
							"raw": "{{host-api-gateway}}/management-service/users/search",
							"host": [
								"{{host-api-gateway}}"
							],
							"path": [
								"management-service",
								"users",
								"search"
							]
						},
						"description": "API end point to login into Trio cloud platform. The authorization client details has to be base64 string encoded before sending as request.\n\nEx:- Javascript\n\nbtoa('my-trusted-client:123456');\n\nAbove script would return the data as 'bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2' which has to be sent to the request header as follows:\n\nAuthorization: Bearer bXktdHJ1c3RlZC1jbGllbnQ6MTIzNDU2\n"
					},
					"response": []
				}
			],
			"description": "Deposit\r\nSpend\r\nPortfolio reallocation\r\nMarket price changes"
		}
	]
}